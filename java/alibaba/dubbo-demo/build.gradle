
buildscript {
    ext {
        //springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
    }
}

allprojects {

    apply plugin: 'eclipse'
    apply plugin: 'idea'
//    apply plugin: 'org.springframework.boot'
    //apply plugin: 'application'
    apply plugin: 'project-report'

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url 'https://repo.spring.io/libs-milestone' }
        mavenCentral()
    }


    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
    eclipse {
        classpath {
            downloadSources = true
        }
    }




}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: "com.gorylenko.gradle-git-properties"

    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"



    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("com.alibaba:dubbo-bom:${dubboVersion}")
        }

        dependencies {
            //dependency('com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.8.7')
//            dependency('org.apache.httpcomponents:httpclient:4.5.3')

            dependency('log4j:log4j:1.2.17')

//            dependency("org.springframework.boot:spring-boot-starter:${springBootVersion}"){
//                exclude 'org.springframework.boot:spring-boot-starter-logging'
//            }

//            dependency("org.springframework.boot:spring-boot-starter:${springBootVersion}") {
//                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//            }


            dependency('org.apache.cxf:cxf-spring-boot-starter-jaxws:3.1.10')
            dependency('org.apache.cxf:cxf-rt-frontend-jaxrs:3.1.10')
            dependency('org.apache.cxf:cxf-rt-rs-service-description-swagger:3.1.10')
            dependency('org.webjars:swagger-ui:2.2.10-1')
            dependency('org.grails:gorm-mongodb-spring-boot:6.0.7.RELEASE')
            dependency('org.grails.plugins:rx-mongodb:6.0.6.RELEASE')
            dependency('org.grails:grails-datastore-gorm-rx-mongodb:6.0.7.RELEASE')
            dependency('org.grails:grails-validation:3.1.11')
            dependency('org.webjars:swagger-ui:2.2.10')
            dependency('javax.ws.rs:jsr311-api:1.1.1')
            dependency('javax.ws.rs:javax.ws.rs-api:2.0.1')

//            dependency('org.glassfish.jersey.ext:jersey-spring3:2.25.1')
//            dependency('org.glassfish.jersey.media:jersey-media-multipart:2.25.1')
//            dependency('org.glassfish.jersey.core:jersey-client:2.25.1')

            dependency('io.swagger:swagger-core:1.5.16')                 // 1.5.12,1.5.10
            dependency('io.swagger:swagger-jaxrs:1.5.16')
            dependency('io.swagger:swagger-jersey2-jaxrs:1.5.16')
            dependency('io.springfox:springfox-swagger2:2.6.1')
            dependency('io.springfox:springfox-data-rest:2.6.1')
            dependency('io.springfox:springfox-staticdocs:2.6.1')
            dependency('io.springfox:springfox-swagger-ui:2.6.1')
            dependency('org.webjars:sockjs-client:1.1.1')

            dependency('org.webjars.bower:angular:1.6.0')
            dependency('org.webjars.bower:angular-messages:1.6.0')
            dependency('org.webjars.bower:angular-animate:1.6.0')
            dependency('org.webjars.bower:angular-aria:1.6.0')
            dependency('org.webjars:angular-material:1.1.1')
            dependency('org.webjars.bower:angular-material-icons:0.7.1') {
                exclude "org.webjars.bower:angular"
            }

//            dependency('com.querydsl:querydsl-apt:4.1.4')
//            dependency('com.querydsl:querydsl-collections:4.1.4')
//            dependency('com.querydsl:querydsl-core:4.1.4')
//            dependency('com.querydsl:querydsl-jpa:4.1.4')
//            dependency('com.querydsl:querydsl-mongodb:4.1.4')
//            dependency('joda-time:joda-time:2.9.7')
//            dependency('com.google.guava:guava:21.0')
            dependency('org.apache.commons:commons-math3:3.6.1')
            dependency('commons-io:commons-io:2.6')
            dependency('org.mongodb.morphia:morphia:1.3.2')

            // openfeign
            dependency("io.github.openfeign:feign-core:${feignVersion}")
            dependency("io.github.openfeign:feign-slf4j:${feignVersion}")
            dependency("io.github.openfeign:feign-httpclient:${feignVersion}")
            dependency("io.github.openfeign:feign-jaxrs:${feignVersion}")
            dependency("io.github.openfeign:feign-jackson:${feignVersion}")


//            dependency("com.alibaba:dubbo:${dubboVersion}")
//
//            dependency("com.alibaba:dubbo-serialization:${dubboVersion}")
//            dependency("com.alibaba:dubbo-serialization-kryo:${dubboVersion}")
//            dependency("com.alibaba:dubbo-serialization-jdk:${dubboVersion}")
//            dependency("com.alibaba:dubbo-serialization-hessian2:${dubboVersion}")
//            dependency("com.alibaba:dubbo-serialization-fastjson:${dubboVersion}")
//
//            dependency("com.alibaba:dubbo-registry-api:${dubboVersion}")
//            dependency("com.alibaba:dubbo-registry-multicast:${dubboVersion}")
//            dependency("com.alibaba:dubbo-registry-zookeeper:${dubboVersion}")
//            dependency("com.alibaba:dubbo-registry-default:${dubboVersion}")
//            dependency("com.alibaba:dubbo-registry-redis:${dubboVersion}")
//
//            dependency("com.alibaba:dubbo-rpc:${dubboVersion}")
//            dependency("com.alibaba:dubbo-rpc-api:${dubboVersion}")
//            dependency("com.alibaba:dubbo-rpc-dubbo:${dubboVersion}")
//
//
//            dependency("com.alibaba:dubbo-remoting-api:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-zookeeper:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-netty:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-http:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-mina:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-p2p:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-netty4:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting-grizzly:${dubboVersion}")
//            dependency("com.alibaba:dubbo-remoting:${dubboVersion}")
//
//            dependency("com.alibaba:dubbo-config-spring:${dubboVersion}")
//            dependency("com.alibaba:dubbo-container-spring:${dubboVersion}")


            //dependency('org.apache.geode:geode-core:1.1.1')

            // cirator 降低版本，参考：
            // https://github.com/apache/incubator-dubbo/issues/1532
            dependency('org.apache.curator:curator-framework:2.12.0')
            dependency('org.apache.curator:curator-client:2.12.0')



        }
    }


//    dependencies {
//        compile('org.codehaus.groovy:groovy-all')
//        compile('org.springframework.boot:spring-boot-starter-web')
//        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
//        compile("org.springframework.boot:spring-boot-devtools")
//        compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
//        compile('org.apache.httpcomponents:httpclient')
//
//        testCompile('org.springframework.boot:spring-boot-starter-test')
//    }


    bootRun {
        //addResources = true
        systemProperties = System.properties
    }

    springBoot {
        buildInfo {
            properties {
                additional = [
                        'a': 'alpha',
                        'b': 'bravo'
                ]
            }
        }
    }

    jar {
        manifest {
            attributes "Implementation-Version": project.version
        }
    }

    // gradle run -Dexec.args="arg1 arg2 arg3"
    //mainClassName = System.getProperty("mainClass")
    //run {
    //    //args System.getProperty("exec.args")?.split()
    //}

    // gradle -DmainClass=me.test.Example execute
    task execute(type: JavaExec) {
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        //archives javadocJar
    }

    gitProperties {
        gitRepositoryRoot = new File("${project.rootDir}/../../..")
    }



}