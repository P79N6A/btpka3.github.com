/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.IndiDictRecord;


/**
 * 指标字典表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndiDict extends TableImpl<IndiDictRecord> {

    private static final long serialVersionUID = 2113446322;

    /**
     * The reference instance of <code>SMETA_APP.indi_dict</code>
     */
    public static final IndiDict INDI_DICT = new IndiDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndiDictRecord> getRecordType() {
        return IndiDictRecord.class;
    }

    /**
     * The column <code>SMETA_APP.indi_dict.id</code>. 主键
     */
    public final TableField<IndiDictRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.indi_dict.gmt_create</code>. 创建时间
     */
    public final TableField<IndiDictRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.indi_dict.gmt_modified</code>. 修改时间
     */
    public final TableField<IndiDictRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.indi_dict.created_by</code>. 字典创建者
     */
    public final TableField<IndiDictRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "字典创建者");

    /**
     * The column <code>SMETA_APP.indi_dict.updated_by</code>. 字典更新者
     */
    public final TableField<IndiDictRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(64), this, "字典更新者");

    /**
     * The column <code>SMETA_APP.indi_dict.code</code>. 字典编码
     */
    public final TableField<IndiDictRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "字典编码");

    /**
     * The column <code>SMETA_APP.indi_dict.name</code>. 字典名称
     */
    public final TableField<IndiDictRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "字典名称");

    /**
     * The column <code>SMETA_APP.indi_dict.is_effective</code>. 逻辑删除标记位
     */
    public final TableField<IndiDictRecord, Byte> IS_EFFECTIVE = createField("is_effective", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "逻辑删除标记位");

    /**
     * The column <code>SMETA_APP.indi_dict.is_indiname_part</code>. 是否参与指标名称构建
     */
    public final TableField<IndiDictRecord, Byte> IS_INDINAME_PART = createField("is_indiname_part", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "是否参与指标名称构建");

    /**
     * The column <code>SMETA_APP.indi_dict.description</code>. 描述
     */
    public final TableField<IndiDictRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "描述");

    /**
     * The column <code>SMETA_APP.indi_dict.uniq_code</code>. 字典唯一编码
     */
    public final TableField<IndiDictRecord, String> UNIQ_CODE = createField("uniq_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "字典唯一编码");

    /**
     * The column <code>SMETA_APP.indi_dict.type_code</code>. 类型编码
     */
    public final TableField<IndiDictRecord, String> TYPE_CODE = createField("type_code", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "类型编码");

    /**
     * The column <code>SMETA_APP.indi_dict.type_name</code>. 类型名称
     */
    public final TableField<IndiDictRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "类型名称");

    /**
     * The column <code>SMETA_APP.indi_dict.order_seq</code>. 排序值
     */
    public final TableField<IndiDictRecord, Byte> ORDER_SEQ = createField("order_seq", org.jooq.impl.SQLDataType.TINYINT, this, "排序值");

    /**
     * Create a <code>SMETA_APP.indi_dict</code> table reference
     */
    public IndiDict() {
        this(DSL.name("indi_dict"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.indi_dict</code> table reference
     */
    public IndiDict(String alias) {
        this(DSL.name(alias), INDI_DICT);
    }

    /**
     * Create an aliased <code>SMETA_APP.indi_dict</code> table reference
     */
    public IndiDict(Name alias) {
        this(alias, INDI_DICT);
    }

    private IndiDict(Name alias, Table<IndiDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndiDict(Name alias, Table<IndiDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标字典表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDI_DICT_IDX_CODE, Indexes.INDI_DICT_IDX_IF, Indexes.INDI_DICT_IDX_TD, Indexes.INDI_DICT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndiDictRecord, ULong> getIdentity() {
        return Keys.IDENTITY_INDI_DICT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndiDictRecord> getPrimaryKey() {
        return Keys.KEY_INDI_DICT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndiDictRecord>> getKeys() {
        return Arrays.<UniqueKey<IndiDictRecord>>asList(Keys.KEY_INDI_DICT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndiDict as(String alias) {
        return new IndiDict(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndiDict as(Name alias) {
        return new IndiDict(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndiDict rename(String name) {
        return new IndiDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndiDict rename(Name name) {
        return new IndiDict(name, null);
    }
}
