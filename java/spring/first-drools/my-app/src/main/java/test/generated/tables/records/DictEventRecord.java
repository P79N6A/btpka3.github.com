/*
 * This file is generated by jOOQ.
*/
package test.generated.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;

import test.generated.tables.DictEvent;


/**
 * 事件表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictEventRecord extends UpdatableRecordImpl<DictEventRecord> {

    private static final long serialVersionUID = 897208031;

    /**
     * Setter for <code>SMETA_APP.dict_event.id</code>. 主键
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.id</code>. 主键
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.gmt_create</code>. 创建时间
     */
    public void setGmtCreate(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.gmt_create</code>. 创建时间
     */
    public Timestamp getGmtCreate() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.gmt_modified</code>. 修改时间
     */
    public void setGmtModified(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.gmt_modified</code>. 修改时间
     */
    public Timestamp getGmtModified() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.operator_id</code>. 操作人ID
     */
    public void setOperatorId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.operator_id</code>. 操作人ID
     */
    public String getOperatorId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.operator</code>. 操作人
     */
    public void setOperator(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.operator</code>. 操作人
     */
    public String getOperator() {
        return (String) get(4);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.code</code>. 事件编码
     */
    public void setCode(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.code</code>. 事件编码
     */
    public String getCode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.name</code>. 事件名称
     */
    public void setName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.name</code>. 事件名称
     */
    public String getName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.method</code>. 接入方式：notify、hsf、http
     */
    public void setMethod(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.method</code>. 接入方式：notify、hsf、http
     */
    public String getMethod() {
        return (String) get(7);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.source_event</code>. 来源事件
     */
    public void setSourceEvent(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.source_event</code>. 来源事件
     */
    public String getSourceEvent() {
        return (String) get(8);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.source_bu</code>. 来源BU
     */
    public void setSourceBu(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.source_bu</code>. 来源BU
     */
    public String getSourceBu() {
        return (String) get(9);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.source_sys</code>. 来源系统
     */
    public void setSourceSys(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.source_sys</code>. 来源系统
     */
    public String getSourceSys() {
        return (String) get(10);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.source_biz_contacter</code>. 源业务联系人
     */
    public void setSourceBizContacter(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.source_biz_contacter</code>. 源业务联系人
     */
    public String getSourceBizContacter() {
        return (String) get(11);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.source_tech_contacter</code>. 源技术联系人
     */
    public void setSourceTechContacter(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.source_tech_contacter</code>. 源技术联系人
     */
    public String getSourceTechContacter() {
        return (String) get(12);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.comment</code>. 事件描述
     */
    public void setComment(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.comment</code>. 事件描述
     */
    public String getComment() {
        return (String) get(13);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_amount</code>. 预估事件量（每天）
     */
    public void setEventAmount(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_amount</code>. 预估事件量（每天）
     */
    public String getEventAmount() {
        return (String) get(14);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.top_qps</code>. 高峰QPS
     */
    public void setTopQps(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.top_qps</code>. 高峰QPS
     */
    public String getTopQps() {
        return (String) get(15);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.sla</code>. SLA要求
     */
    public void setSla(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.sla</code>. SLA要求
     */
    public String getSla() {
        return (String) get(16);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.biz_contacter</code>. 接入业务联系人
     */
    public void setBizContacter(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.biz_contacter</code>. 接入业务联系人
     */
    public String getBizContacter() {
        return (String) get(17);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.tech_contacter</code>. 接入技术联系人
     */
    public void setTechContacter(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.tech_contacter</code>. 接入技术联系人
     */
    public String getTechContacter() {
        return (String) get(18);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_type</code>. 事件分类
     */
    public void setEventType(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_type</code>. 事件分类
     */
    public String getEventType() {
        return (String) get(19);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.biz_scenes</code>. 业务场景
     */
    public void setBizScenes(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.biz_scenes</code>. 业务场景
     */
    public String getBizScenes() {
        return (String) get(20);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.sample_data</code>. 样例数据
     */
    public void setSampleData(String value) {
        set(21, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.sample_data</code>. 样例数据
     */
    public String getSampleData() {
        return (String) get(21);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.analyze_code</code>. 事件解析代码
     */
    public void setAnalyzeCode(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.analyze_code</code>. 事件解析代码
     */
    public String getAnalyzeCode() {
        return (String) get(22);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.status</code>. 事件状态：0删除，1有效，2草稿，3审批中, 4mtee事件下线
     */
    public void setStatus(Byte value) {
        set(23, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.status</code>. 事件状态：0删除，1有效，2草稿，3审批中, 4mtee事件下线
     */
    public Byte getStatus() {
        return (Byte) get(23);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.biz_contacter_id</code>. 接入业务联系人ID
     */
    public void setBizContacterId(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.biz_contacter_id</code>. 接入业务联系人ID
     */
    public String getBizContacterId() {
        return (String) get(24);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.tech_contacter_id</code>. 接入技术联系人ID
     */
    public void setTechContacterId(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.tech_contacter_id</code>. 接入技术联系人ID
     */
    public String getTechContacterId() {
        return (String) get(25);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.serialize</code>. 事件序列化方式
     */
    public void setSerialize(String value) {
        set(26, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.serialize</code>. 事件序列化方式
     */
    public String getSerialize() {
        return (String) get(26);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.topic</code>. topic
     */
    public void setTopic(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.topic</code>. topic
     */
    public String getTopic() {
        return (String) get(27);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.message_type</code>. type_message
     */
    public void setMessageType(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.message_type</code>. type_message
     */
    public String getMessageType() {
        return (String) get(28);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.odps_table</code>. 云梯表
     */
    public void setOdpsTable(String value) {
        set(29, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.odps_table</code>. 云梯表
     */
    public String getOdpsTable() {
        return (String) get(29);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_group</code>. 事件分组，一个事件可以属于多个分组：china、ameriaa、japan、singapore
     */
    public void setEventGroup(String value) {
        set(30, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_group</code>. 事件分组，一个事件可以属于多个分组：china、ameriaa、japan、singapore
     */
    public String getEventGroup() {
        return (String) get(30);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.mt_offline</code>. 事件是否下线：0：mtee事件不存在，1:mtee 事件有效，3:mtee事件下线
     */
    public void setMtOffline(Byte value) {
        set(31, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.mt_offline</code>. 事件是否下线：0：mtee事件不存在，1:mtee 事件有效，3:mtee事件下线
     */
    public Byte getMtOffline() {
        return (Byte) get(31);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.mt_migration</code>. mtee老事件规则迁移装填，0:未迁移，1：已经迁移
     */
    public void setMtMigration(Byte value) {
        set(32, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.mt_migration</code>. mtee老事件规则迁移装填，0:未迁移，1：已经迁移
     */
    public Byte getMtMigration() {
        return (Byte) get(32);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.mt_distribute</code>. mtee事件是否分发数据，默认不分发, 0: 未分发，1:分发
     */
    public void setMtDistribute(Byte value) {
        set(33, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.mt_distribute</code>. mtee事件是否分发数据，默认不分发, 0: 未分发，1:分发
     */
    public Byte getMtDistribute() {
        return (Byte) get(33);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.nut_event_code</code>. 对应nut中老事件code
     */
    public void setNutEventCode(String value) {
        set(34, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.nut_event_code</code>. 对应nut中老事件code
     */
    public String getNutEventCode() {
        return (String) get(34);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.tenant_code</code>. 租户code
     */
    public void setTenantCode(String value) {
        set(35, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.tenant_code</code>. 租户code
     */
    public String getTenantCode() {
        return (String) get(35);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.threshold</code>. 事件阀值，mtee3.0使用
     */
    public void setThreshold(Integer value) {
        set(36, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.threshold</code>. 事件阀值，mtee3.0使用
     */
    public Integer getThreshold() {
        return (Integer) get(36);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.open_account_id</code>. 用户id，公有云用户使用
     */
    public void setOpenAccountId(Long value) {
        set(37, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.open_account_id</code>. 用户id，公有云用户使用
     */
    public Long getOpenAccountId() {
        return (Long) get(37);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.platform_version</code>. 平台版本号，用来区分mtee2.0和mtee3.0的事件
     */
    public void setPlatformVersion(Integer value) {
        set(38, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.platform_version</code>. 平台版本号，用来区分mtee2.0和mtee3.0的事件
     */
    public Integer getPlatformVersion() {
        return (Integer) get(38);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_step</code>. 事件新建流程步骤
     */
    public void setEventStep(Integer value) {
        set(39, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_step</code>. 事件新建流程步骤
     */
    public Integer getEventStep() {
        return (Integer) get(39);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_migrate</code>. 事件迁移状态：0：未迁移 1：迁移中2：迁移完成
     */
    public void setEventMigrate(Byte value) {
        set(40, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_migrate</code>. 事件迁移状态：0：未迁移 1：迁移中2：迁移完成
     */
    public Byte getEventMigrate() {
        return (Byte) get(40);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_platform</code>. 计算平台标记，实时计算mtee，离线计算airbus
     */
    public void setEventPlatform(String value) {
        set(41, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_platform</code>. 计算平台标记，实时计算mtee，离线计算airbus
     */
    public String getEventPlatform() {
        return (String) get(41);
    }

    /**
     * Setter for <code>SMETA_APP.dict_event.event_store_unit</code>. 事件存储单元信息：有eu13：线上中心、	su18：深圳单元、na61：张北云单元、et2：线上中心
     */
    public void setEventStoreUnit(String value) {
        set(42, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_event.event_store_unit</code>. 事件存储单元信息：有eu13：线上中心、	su18：深圳单元、na61：张北云单元、et2：线上中心
     */
    public String getEventStoreUnit() {
        return (String) get(42);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DictEventRecord
     */
    public DictEventRecord() {
        super(DictEvent.DICT_EVENT);
    }

    /**
     * Create a detached, initialised DictEventRecord
     */
    public DictEventRecord(ULong id, Timestamp gmtCreate, Timestamp gmtModified, String operatorId, String operator, String code, String name, String method, String sourceEvent, String sourceBu, String sourceSys, String sourceBizContacter, String sourceTechContacter, String comment, String eventAmount, String topQps, String sla, String bizContacter, String techContacter, String eventType, String bizScenes, String sampleData, String analyzeCode, Byte status, String bizContacterId, String techContacterId, String serialize, String topic, String messageType, String odpsTable, String eventGroup, Byte mtOffline, Byte mtMigration, Byte mtDistribute, String nutEventCode, String tenantCode, Integer threshold, Long openAccountId, Integer platformVersion, Integer eventStep, Byte eventMigrate, String eventPlatform, String eventStoreUnit) {
        super(DictEvent.DICT_EVENT);

        set(0, id);
        set(1, gmtCreate);
        set(2, gmtModified);
        set(3, operatorId);
        set(4, operator);
        set(5, code);
        set(6, name);
        set(7, method);
        set(8, sourceEvent);
        set(9, sourceBu);
        set(10, sourceSys);
        set(11, sourceBizContacter);
        set(12, sourceTechContacter);
        set(13, comment);
        set(14, eventAmount);
        set(15, topQps);
        set(16, sla);
        set(17, bizContacter);
        set(18, techContacter);
        set(19, eventType);
        set(20, bizScenes);
        set(21, sampleData);
        set(22, analyzeCode);
        set(23, status);
        set(24, bizContacterId);
        set(25, techContacterId);
        set(26, serialize);
        set(27, topic);
        set(28, messageType);
        set(29, odpsTable);
        set(30, eventGroup);
        set(31, mtOffline);
        set(32, mtMigration);
        set(33, mtDistribute);
        set(34, nutEventCode);
        set(35, tenantCode);
        set(36, threshold);
        set(37, openAccountId);
        set(38, platformVersion);
        set(39, eventStep);
        set(40, eventMigrate);
        set(41, eventPlatform);
        set(42, eventStoreUnit);
    }
}
