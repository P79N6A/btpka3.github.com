/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.IndicatorTagRecord;


/**
 * indicator表 和 tag表的多对多的中间表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorTag extends TableImpl<IndicatorTagRecord> {

    private static final long serialVersionUID = -199055969;

    /**
     * The reference instance of <code>SMETA_APP.indicator_tag</code>
     */
    public static final IndicatorTag INDICATOR_TAG = new IndicatorTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorTagRecord> getRecordType() {
        return IndicatorTagRecord.class;
    }

    /**
     * The column <code>SMETA_APP.indicator_tag.id</code>. 主键
     */
    public final TableField<IndicatorTagRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.indicator_tag.gmt_create</code>. 创建时间
     */
    public final TableField<IndicatorTagRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.indicator_tag.gmt_modified</code>. 修改时间
     */
    public final TableField<IndicatorTagRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.indicator_tag.indicator_id</code>. 指标ID（废弃）
     */
    public final TableField<IndicatorTagRecord, ULong> INDICATOR_ID = createField("indicator_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "指标ID（废弃）");

    /**
     * The column <code>SMETA_APP.indicator_tag.tag_id</code>. 标签ID（废弃）
     */
    public final TableField<IndicatorTagRecord, ULong> TAG_ID = createField("tag_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "标签ID（废弃）");

    /**
     * The column <code>SMETA_APP.indicator_tag.tag_code</code>. 标签code
     */
    public final TableField<IndicatorTagRecord, String> TAG_CODE = createField("tag_code", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "标签code");

    /**
     * The column <code>SMETA_APP.indicator_tag.indicator_code</code>. 指标code
     */
    public final TableField<IndicatorTagRecord, String> INDICATOR_CODE = createField("indicator_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标code");

    /**
     * Create a <code>SMETA_APP.indicator_tag</code> table reference
     */
    public IndicatorTag() {
        this(DSL.name("indicator_tag"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_tag</code> table reference
     */
    public IndicatorTag(String alias) {
        this(DSL.name(alias), INDICATOR_TAG);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_tag</code> table reference
     */
    public IndicatorTag(Name alias) {
        this(alias, INDICATOR_TAG);
    }

    private IndicatorTag(Name alias, Table<IndicatorTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorTag(Name alias, Table<IndicatorTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "indicator表 和 tag表的多对多的中间表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDICATOR_TAG_IDX_IND_IN, Indexes.INDICATOR_TAG_IDX_IND_TA_IN, Indexes.INDICATOR_TAG_IDX_INTAGID, Indexes.INDICATOR_TAG_IDX_TAGID, Indexes.INDICATOR_TAG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndicatorTagRecord, ULong> getIdentity() {
        return Keys.IDENTITY_INDICATOR_TAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndicatorTagRecord> getPrimaryKey() {
        return Keys.KEY_INDICATOR_TAG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndicatorTagRecord>> getKeys() {
        return Arrays.<UniqueKey<IndicatorTagRecord>>asList(Keys.KEY_INDICATOR_TAG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorTag as(String alias) {
        return new IndicatorTag(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorTag as(Name alias) {
        return new IndicatorTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorTag rename(String name) {
        return new IndicatorTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorTag rename(Name name) {
        return new IndicatorTag(name, null);
    }
}
