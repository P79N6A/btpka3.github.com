/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.IndicatorFetchInfoRecord;


/**
 * 指标对应的祛暑逻辑
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorFetchInfo extends TableImpl<IndicatorFetchInfoRecord> {

    private static final long serialVersionUID = 434390039;

    /**
     * The reference instance of <code>SMETA_APP.indicator_fetch_info</code>
     */
    public static final IndicatorFetchInfo INDICATOR_FETCH_INFO = new IndicatorFetchInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorFetchInfoRecord> getRecordType() {
        return IndicatorFetchInfoRecord.class;
    }

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.id</code>. 主键
     */
    public final TableField<IndicatorFetchInfoRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.gmt_create</code>. 创建时间
     */
    public final TableField<IndicatorFetchInfoRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.gmt_modified</code>. 修改时间
     */
    public final TableField<IndicatorFetchInfoRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_field</code>. 取数字段
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_FIELD = createField("fetch_field", org.jooq.impl.SQLDataType.VARCHAR(64), this, "取数字段");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_table</code>. 取数来源
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_TABLE = createField("fetch_table", org.jooq.impl.SQLDataType.VARCHAR(128), this, "取数来源");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_sql</code>. 取数算法逻辑
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_SQL = createField("fetch_sql", org.jooq.impl.SQLDataType.CLOB, this, "取数算法逻辑");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.description</code>. 取数描述
     */
    public final TableField<IndicatorFetchInfoRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "取数描述");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.indicator_code</code>. 指标code
     */
    public final TableField<IndicatorFetchInfoRecord, String> INDICATOR_CODE = createField("indicator_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标code");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_type</code>. 取数类型（实时、离线）
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_TYPE = createField("fetch_type", org.jooq.impl.SQLDataType.VARCHAR(20), this, "取数类型（实时、离线）");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_code</code>. 实时取数编码
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_CODE = createField("fetch_code", org.jooq.impl.SQLDataType.VARCHAR(100), this, "实时取数编码");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_method</code>. 实时取数方法
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_METHOD = createField("fetch_method", org.jooq.impl.SQLDataType.VARCHAR(20), this, "实时取数方法");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_source</code>. 实时取数来源
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_SOURCE = createField("fetch_source", org.jooq.impl.SQLDataType.VARCHAR(20), this, "实时取数来源");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_source_param</code>. 实时取数来源参数
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_SOURCE_PARAM = createField("fetch_source_param", org.jooq.impl.SQLDataType.VARCHAR(100), this, "实时取数来源参数");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.fetch_source_code</code>. 实时取数数据源编码
     */
    public final TableField<IndicatorFetchInfoRecord, String> FETCH_SOURCE_CODE = createField("fetch_source_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "实时取数数据源编码");

    /**
     * The column <code>SMETA_APP.indicator_fetch_info.status</code>. 状态 0无效 1有效
     */
    public final TableField<IndicatorFetchInfoRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "状态 0无效 1有效");

    /**
     * Create a <code>SMETA_APP.indicator_fetch_info</code> table reference
     */
    public IndicatorFetchInfo() {
        this(DSL.name("indicator_fetch_info"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_fetch_info</code> table reference
     */
    public IndicatorFetchInfo(String alias) {
        this(DSL.name(alias), INDICATOR_FETCH_INFO);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_fetch_info</code> table reference
     */
    public IndicatorFetchInfo(Name alias) {
        this(alias, INDICATOR_FETCH_INFO);
    }

    private IndicatorFetchInfo(Name alias, Table<IndicatorFetchInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorFetchInfo(Name alias, Table<IndicatorFetchInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标对应的祛暑逻辑");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDICATOR_FETCH_INFO_IDX_FETCH_CODE, Indexes.INDICATOR_FETCH_INFO_IDX_IND_IN, Indexes.INDICATOR_FETCH_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndicatorFetchInfoRecord, ULong> getIdentity() {
        return Keys.IDENTITY_INDICATOR_FETCH_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndicatorFetchInfoRecord> getPrimaryKey() {
        return Keys.KEY_INDICATOR_FETCH_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndicatorFetchInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<IndicatorFetchInfoRecord>>asList(Keys.KEY_INDICATOR_FETCH_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorFetchInfo as(String alias) {
        return new IndicatorFetchInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorFetchInfo as(Name alias) {
        return new IndicatorFetchInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorFetchInfo rename(String name) {
        return new IndicatorFetchInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorFetchInfo rename(Name name) {
        return new IndicatorFetchInfo(name, null);
    }
}
