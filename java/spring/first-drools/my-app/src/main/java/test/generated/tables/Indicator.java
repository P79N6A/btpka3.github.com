/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.IndicatorRecord;


/**
 * 指标定义表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indicator extends TableImpl<IndicatorRecord> {

    private static final long serialVersionUID = 828045452;

    /**
     * The reference instance of <code>SMETA_APP.indicator</code>
     */
    public static final Indicator INDICATOR = new Indicator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorRecord> getRecordType() {
        return IndicatorRecord.class;
    }

    /**
     * The column <code>SMETA_APP.indicator.id</code>. 主键
     */
    public final TableField<IndicatorRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.indicator.gmt_create</code>. 创建时间
     */
    public final TableField<IndicatorRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.indicator.gmt_modified</code>. 修改时间
     */
    public final TableField<IndicatorRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.indicator.name</code>. 指标名
     */
    public final TableField<IndicatorRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "指标名");

    /**
     * The column <code>SMETA_APP.indicator.code</code>. 指标对应的唯一代码
     */
    public final TableField<IndicatorRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标对应的唯一代码");

    /**
     * The column <code>SMETA_APP.indicator.description</code>. 指标描述
     */
    public final TableField<IndicatorRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "指标描述");

    /**
     * The column <code>SMETA_APP.indicator.is_effective</code>. 指标状态：0无效或已删除，1有效，2草稿，3审批中
     */
    public final TableField<IndicatorRecord, Byte> IS_EFFECTIVE = createField("is_effective", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "指标状态：0无效或已删除，1有效，2草稿，3审批中");

    /**
     * The column <code>SMETA_APP.indicator.created_by</code>. 指标创建者
     */
    public final TableField<IndicatorRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标创建者");

    /**
     * The column <code>SMETA_APP.indicator.updated_by</code>. 指标更新者
     */
    public final TableField<IndicatorRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(64), this, "指标更新者");

    /**
     * The column <code>SMETA_APP.indicator.owner</code>. 指标负责人
     */
    public final TableField<IndicatorRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(64), this, "指标负责人");

    /**
     * The column <code>SMETA_APP.indicator.status</code>. 指标状态（废弃）
     */
    public final TableField<IndicatorRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(8), this, "指标状态（废弃）");

    /**
     * The column <code>SMETA_APP.indicator.extends_from</code>. 指标派生源（废弃）
     */
    public final TableField<IndicatorRecord, Long> EXTENDS_FROM = createField("extends_from", org.jooq.impl.SQLDataType.BIGINT, this, "指标派生源（废弃）");

    /**
     * The column <code>SMETA_APP.indicator.algorithm</code>. 指标算法
     */
    public final TableField<IndicatorRecord, String> ALGORITHM = createField("algorithm", org.jooq.impl.SQLDataType.CLOB, this, "指标算法");

    /**
     * The column <code>SMETA_APP.indicator.source</code>. 指标来源（废弃）
     */
    public final TableField<IndicatorRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(16), this, "指标来源（废弃）");

    /**
     * The column <code>SMETA_APP.indicator.owner_id</code>. 指标负责人ID
     */
    public final TableField<IndicatorRecord, String> OWNER_ID = createField("owner_id", org.jooq.impl.SQLDataType.VARCHAR(16), this, "指标负责人ID");

    /**
     * The column <code>SMETA_APP.indicator.user_defined_data</code>. 自定义数据(json格式)
     */
    public final TableField<IndicatorRecord, String> USER_DEFINED_DATA = createField("user_defined_data", org.jooq.impl.SQLDataType.CLOB, this, "自定义数据(json格式)");

    /**
     * The column <code>SMETA_APP.indicator.particle</code>. 指标粒度
     */
    public final TableField<IndicatorRecord, String> PARTICLE = createField("particle", org.jooq.impl.SQLDataType.VARCHAR(64), this, "指标粒度");

    /**
     * The column <code>SMETA_APP.indicator.time_window</code>. 时间窗口
     */
    public final TableField<IndicatorRecord, String> TIME_WINDOW = createField("time_window", org.jooq.impl.SQLDataType.VARCHAR(32), this, "时间窗口");

    /**
     * The column <code>SMETA_APP.indicator.static_subject</code>. 统计主体
     */
    public final TableField<IndicatorRecord, String> STATIC_SUBJECT = createField("static_subject", org.jooq.impl.SQLDataType.VARCHAR(64), this, "统计主体");

    /**
     * The column <code>SMETA_APP.indicator.static_type</code>. 统计类型
     */
    public final TableField<IndicatorRecord, String> STATIC_TYPE = createField("static_type", org.jooq.impl.SQLDataType.VARCHAR(64), this, "统计类型");

    /**
     * The column <code>SMETA_APP.indicator.event</code>. 指标事件，用于生成二级类目
     */
    public final TableField<IndicatorRecord, String> EVENT = createField("event", org.jooq.impl.SQLDataType.VARCHAR(64), this, "指标事件，用于生成二级类目");

    /**
     * The column <code>SMETA_APP.indicator.life_cycle</code>. 生命周期
     */
    public final TableField<IndicatorRecord, String> LIFE_CYCLE = createField("life_cycle", org.jooq.impl.SQLDataType.VARCHAR(32), this, "生命周期");

    /**
     * The column <code>SMETA_APP.indicator.biz_name</code>. 业务名称
     */
    public final TableField<IndicatorRecord, String> BIZ_NAME = createField("biz_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "业务名称");

    /**
     * The column <code>SMETA_APP.indicator.biz_code</code>. 业务名称
     */
    public final TableField<IndicatorRecord, String> BIZ_CODE = createField("biz_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "业务名称");

    /**
     * The column <code>SMETA_APP.indicator.formal_name</code>. 规范化名称
     */
    public final TableField<IndicatorRecord, String> FORMAL_NAME = createField("formal_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "规范化名称");

    /**
     * The column <code>SMETA_APP.indicator.group_code</code>. 合并分组编码
     */
    public final TableField<IndicatorRecord, String> GROUP_CODE = createField("group_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "合并分组编码");

    /**
     * The column <code>SMETA_APP.indicator.old_code</code>. 业务代码，兼容老数据
     */
    public final TableField<IndicatorRecord, String> OLD_CODE = createField("old_code", org.jooq.impl.SQLDataType.VARCHAR(500), this, "业务代码，兼容老数据");

    /**
     * The column <code>SMETA_APP.indicator.workspace_code</code>. 所属的系统空间的编码，区分离线指标，实时指标
     */
    public final TableField<IndicatorRecord, String> WORKSPACE_CODE = createField("workspace_code", org.jooq.impl.SQLDataType.VARCHAR(32), this, "所属的系统空间的编码，区分离线指标，实时指标");

    /**
     * The column <code>SMETA_APP.indicator.caculation_event</code>. 计算事件
     */
    public final TableField<IndicatorRecord, String> CACULATION_EVENT = createField("caculation_event", org.jooq.impl.SQLDataType.VARCHAR(128), this, "计算事件");

    /**
     * The column <code>SMETA_APP.indicator.condition_type</code>. 条件配置方式：config配置模式，codeing码农模式。
     */
    public final TableField<IndicatorRecord, String> CONDITION_TYPE = createField("condition_type", org.jooq.impl.SQLDataType.VARCHAR(32), this, "条件配置方式：config配置模式，codeing码农模式。");

    /**
     * The column <code>SMETA_APP.indicator.condition_json</code>. 配置模式，JOSN格式条件配置数据，用于修改回显。
     */
    public final TableField<IndicatorRecord, String> CONDITION_JSON = createField("condition_json", org.jooq.impl.SQLDataType.CLOB, this, "配置模式，JOSN格式条件配置数据，用于修改回显。");

    /**
     * The column <code>SMETA_APP.indicator.level</code>. 业务等级：P1，P2，P3，P4
     */
    public final TableField<IndicatorRecord, String> LEVEL = createField("level", org.jooq.impl.SQLDataType.VARCHAR(32), this, "业务等级：P1，P2，P3，P4");

    /**
     * The column <code>SMETA_APP.indicator.threshold</code>. 时间窗口计算阀值
     */
    public final TableField<IndicatorRecord, Integer> THRESHOLD = createField("threshold", org.jooq.impl.SQLDataType.INTEGER, this, "时间窗口计算阀值");

    /**
     * The column <code>SMETA_APP.indicator.business_workspace</code>. 使用场景
     */
    public final TableField<IndicatorRecord, String> BUSINESS_WORKSPACE = createField("business_workspace", org.jooq.impl.SQLDataType.VARCHAR(32), this, "使用场景");

    /**
     * The column <code>SMETA_APP.indicator.business_category</code>. 类目分类
     */
    public final TableField<IndicatorRecord, String> BUSINESS_CATEGORY = createField("business_category", org.jooq.impl.SQLDataType.VARCHAR(32), this, "类目分类");

    /**
     * The column <code>SMETA_APP.indicator.new_config</code>. 是否统一指标配置入口：1是，空或0 不是
     */
    public final TableField<IndicatorRecord, Integer> NEW_CONFIG = createField("new_config", org.jooq.impl.SQLDataType.INTEGER, this, "是否统一指标配置入口：1是，空或0 不是");

    /**
     * The column <code>SMETA_APP.indicator.columns</code>. 规则中用到属性，多个属性逗号分隔
     */
    public final TableField<IndicatorRecord, String> COLUMNS = createField("columns", org.jooq.impl.SQLDataType.VARCHAR(4096), this, "规则中用到属性，多个属性逗号分隔");

    /**
     * The column <code>SMETA_APP.indicator.tenant_code</code>. 租户code
     */
    public final TableField<IndicatorRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("ali_taobao", org.jooq.impl.SQLDataType.VARCHAR)), this, "租户code");

    /**
     * The column <code>SMETA_APP.indicator.is_sync</code>. 是否同步指标，0-否，1-是
     */
    public final TableField<IndicatorRecord, Byte> IS_SYNC = createField("is_sync", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否同步指标，0-否，1-是");

    /**
     * The column <code>SMETA_APP.indicator.is_calculate_indi</code>. 是否计算指标,0-否,1-是
     */
    public final TableField<IndicatorRecord, Byte> IS_CALCULATE_INDI = createField("is_calculate_indi", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否计算指标,0-否,1-是");

    /**
     * The column <code>SMETA_APP.indicator.calculate_indi_code</code>. 非计算指标对应的计算指标code
     */
    public final TableField<IndicatorRecord, String> CALCULATE_INDI_CODE = createField("calculate_indi_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "非计算指标对应的计算指标code");

    /**
     * Create a <code>SMETA_APP.indicator</code> table reference
     */
    public Indicator() {
        this(DSL.name("indicator"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator</code> table reference
     */
    public Indicator(String alias) {
        this(DSL.name(alias), INDICATOR);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator</code> table reference
     */
    public Indicator(Name alias) {
        this(alias, INDICATOR);
    }

    private Indicator(Name alias, Table<IndicatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Indicator(Name alias, Table<IndicatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标定义表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDICATOR_IDX_DF, Indexes.INDICATOR_IDX_GC, Indexes.INDICATOR_IDX_IS_EFFECTIVE, Indexes.INDICATOR_IND_CO_IS, Indexes.INDICATOR_PRIMARY, Indexes.INDICATOR_UNIQ_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndicatorRecord, Long> getIdentity() {
        return Keys.IDENTITY_INDICATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndicatorRecord> getPrimaryKey() {
        return Keys.KEY_INDICATOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndicatorRecord>> getKeys() {
        return Arrays.<UniqueKey<IndicatorRecord>>asList(Keys.KEY_INDICATOR_PRIMARY, Keys.KEY_INDICATOR_UNIQ_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Indicator as(String alias) {
        return new Indicator(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Indicator as(Name alias) {
        return new Indicator(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Indicator rename(String name) {
        return new Indicator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Indicator rename(Name name) {
        return new Indicator(name, null);
    }
}
