/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictSampleDataRecord;


/**
 * 事件原生属性样例数据
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictSampleData extends TableImpl<DictSampleDataRecord> {

    private static final long serialVersionUID = 1115420333;

    /**
     * The reference instance of <code>SMETA_APP.dict_sample_data</code>
     */
    public static final DictSampleData DICT_SAMPLE_DATA = new DictSampleData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictSampleDataRecord> getRecordType() {
        return DictSampleDataRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_sample_data.id</code>. 主键
     */
    public final TableField<DictSampleDataRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_sample_data.gmt_create</code>. 创建时间
     */
    public final TableField<DictSampleDataRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_sample_data.gmt_modified</code>. 修改时间
     */
    public final TableField<DictSampleDataRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_sample_data.event_code</code>. 事件code
     */
    public final TableField<DictSampleDataRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件code");

    /**
     * The column <code>SMETA_APP.dict_sample_data.column_code</code>. 属性code
     */
    public final TableField<DictSampleDataRecord, String> COLUMN_CODE = createField("column_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "属性code");

    /**
     * The column <code>SMETA_APP.dict_sample_data.sample_data</code>. 属性样例数据
     */
    public final TableField<DictSampleDataRecord, String> SAMPLE_DATA = createField("sample_data", org.jooq.impl.SQLDataType.VARCHAR(4096).nullable(false), this, "属性样例数据");

    /**
     * Create a <code>SMETA_APP.dict_sample_data</code> table reference
     */
    public DictSampleData() {
        this(DSL.name("dict_sample_data"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_sample_data</code> table reference
     */
    public DictSampleData(String alias) {
        this(DSL.name(alias), DICT_SAMPLE_DATA);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_sample_data</code> table reference
     */
    public DictSampleData(Name alias) {
        this(alias, DICT_SAMPLE_DATA);
    }

    private DictSampleData(Name alias, Table<DictSampleDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictSampleData(Name alias, Table<DictSampleDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "事件原生属性样例数据");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_SAMPLE_DATA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictSampleDataRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_SAMPLE_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictSampleDataRecord> getPrimaryKey() {
        return Keys.KEY_DICT_SAMPLE_DATA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictSampleDataRecord>> getKeys() {
        return Arrays.<UniqueKey<DictSampleDataRecord>>asList(Keys.KEY_DICT_SAMPLE_DATA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictSampleData as(String alias) {
        return new DictSampleData(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictSampleData as(Name alias) {
        return new DictSampleData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictSampleData rename(String name) {
        return new DictSampleData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictSampleData rename(Name name) {
        return new DictSampleData(name, null);
    }
}
