/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictColumnClearRecord;


/**
 * 数据字典可清除属性信息统计
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictColumnClear extends TableImpl<DictColumnClearRecord> {

    private static final long serialVersionUID = -1269028153;

    /**
     * The reference instance of <code>SMETA_APP.dict_column_clear</code>
     */
    public static final DictColumnClear DICT_COLUMN_CLEAR = new DictColumnClear();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictColumnClearRecord> getRecordType() {
        return DictColumnClearRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_column_clear.id</code>. 主键
     */
    public final TableField<DictColumnClearRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_column_clear.gmt_create</code>. 创建时间
     */
    public final TableField<DictColumnClearRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_column_clear.gmt_modified</code>. 修改时间
     */
    public final TableField<DictColumnClearRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_column_clear.cn_name</code>. 属性中文名称
     */
    public final TableField<DictColumnClearRecord, String> CN_NAME = createField("cn_name", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "属性中文名称");

    /**
     * The column <code>SMETA_APP.dict_column_clear.en_name</code>. 属性英文名称
     */
    public final TableField<DictColumnClearRecord, String> EN_NAME = createField("en_name", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "属性英文名称");

    /**
     * The column <code>SMETA_APP.dict_column_clear.code</code>. 属性code
     */
    public final TableField<DictColumnClearRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "属性code");

    /**
     * The column <code>SMETA_APP.dict_column_clear.type</code>. 属性种类
     */
    public final TableField<DictColumnClearRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "属性种类");

    /**
     * The column <code>SMETA_APP.dict_column_clear.operator_id</code>. 操作者工号
     */
    public final TableField<DictColumnClearRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作者工号");

    /**
     * The column <code>SMETA_APP.dict_column_clear.operator</code>. 操作者
     */
    public final TableField<DictColumnClearRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作者");

    /**
     * The column <code>SMETA_APP.dict_column_clear.status</code>. 属性审核状态 0  删除  1 有效 2 草稿 3 审核中
     */
    public final TableField<DictColumnClearRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "属性审核状态 0  删除  1 有效 2 草稿 3 审核中");

    /**
     * The column <code>SMETA_APP.dict_column_clear.tenant_code</code>. 租户code
     */
    public final TableField<DictColumnClearRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("ali_taobao", org.jooq.impl.SQLDataType.VARCHAR)), this, "租户code");

    /**
     * The column <code>SMETA_APP.dict_column_clear.clear_batch</code>. 清理批次
     */
    public final TableField<DictColumnClearRecord, String> CLEAR_BATCH = createField("clear_batch", org.jooq.impl.SQLDataType.VARCHAR(64), this, "清理批次");

    /**
     * The column <code>SMETA_APP.dict_column_clear.clear_date</code>. 清理日期
     */
    public final TableField<DictColumnClearRecord, String> CLEAR_DATE = createField("clear_date", org.jooq.impl.SQLDataType.VARCHAR(64), this, "清理日期");

    /**
     * Create a <code>SMETA_APP.dict_column_clear</code> table reference
     */
    public DictColumnClear() {
        this(DSL.name("dict_column_clear"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_column_clear</code> table reference
     */
    public DictColumnClear(String alias) {
        this(DSL.name(alias), DICT_COLUMN_CLEAR);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_column_clear</code> table reference
     */
    public DictColumnClear(Name alias) {
        this(alias, DICT_COLUMN_CLEAR);
    }

    private DictColumnClear(Name alias, Table<DictColumnClearRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictColumnClear(Name alias, Table<DictColumnClearRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "数据字典可清除属性信息统计");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_COLUMN_CLEAR_IDX_CN_NAME, Indexes.DICT_COLUMN_CLEAR_IDX_CODE, Indexes.DICT_COLUMN_CLEAR_IDX_EN_NAME, Indexes.DICT_COLUMN_CLEAR_PRIMARY, Indexes.DICT_COLUMN_CLEAR_UK_CNNAME_TENANT, Indexes.DICT_COLUMN_CLEAR_UK_CODE_TENANT, Indexes.DICT_COLUMN_CLEAR_UK_ENNAME_TENANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictColumnClearRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_COLUMN_CLEAR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictColumnClearRecord> getPrimaryKey() {
        return Keys.KEY_DICT_COLUMN_CLEAR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictColumnClearRecord>> getKeys() {
        return Arrays.<UniqueKey<DictColumnClearRecord>>asList(Keys.KEY_DICT_COLUMN_CLEAR_PRIMARY, Keys.KEY_DICT_COLUMN_CLEAR_UK_CNNAME_TENANT, Keys.KEY_DICT_COLUMN_CLEAR_UK_ENNAME_TENANT, Keys.KEY_DICT_COLUMN_CLEAR_UK_CODE_TENANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictColumnClear as(String alias) {
        return new DictColumnClear(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictColumnClear as(Name alias) {
        return new DictColumnClear(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictColumnClear rename(String name) {
        return new DictColumnClear(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictColumnClear rename(Name name) {
        return new DictColumnClear(name, null);
    }
}
