/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictEventColumnModifyRecord;


/**
 * 数据字典表修改确认
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictEventColumnModify extends TableImpl<DictEventColumnModifyRecord> {

    private static final long serialVersionUID = 2055916776;

    /**
     * The reference instance of <code>SMETA_APP.dict_event_column_modify</code>
     */
    public static final DictEventColumnModify DICT_EVENT_COLUMN_MODIFY = new DictEventColumnModify();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictEventColumnModifyRecord> getRecordType() {
        return DictEventColumnModifyRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.id</code>. 主键
     */
    public final TableField<DictEventColumnModifyRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.gmt_create</code>. 创建时间
     */
    public final TableField<DictEventColumnModifyRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.gmt_modified</code>. 修改时间
     */
    public final TableField<DictEventColumnModifyRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.no</code>. 序号
     */
    public final TableField<DictEventColumnModifyRecord, String> NO = createField("no", org.jooq.impl.SQLDataType.CLOB, this, "序号");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.event_code</code>. 事件code
     */
    public final TableField<DictEventColumnModifyRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.CLOB, this, "事件code");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.entity_code</code>. 实体code
     */
    public final TableField<DictEventColumnModifyRecord, String> ENTITY_CODE = createField("entity_code", org.jooq.impl.SQLDataType.CLOB, this, "实体code");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.entity_script</code>. 实体脚本
     */
    public final TableField<DictEventColumnModifyRecord, String> ENTITY_SCRIPT = createField("entity_script", org.jooq.impl.SQLDataType.CLOB, this, "实体脚本");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.odl_column_name</code>. 原属性名称
     */
    public final TableField<DictEventColumnModifyRecord, String> ODL_COLUMN_NAME = createField("odl_column_name", org.jooq.impl.SQLDataType.CLOB, this, "原属性名称");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.odl_column_code</code>. 原属性code
     */
    public final TableField<DictEventColumnModifyRecord, String> ODL_COLUMN_CODE = createField("odl_column_code", org.jooq.impl.SQLDataType.CLOB, this, "原属性code");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.odl_column_scritp</code>. 原属性脚本
     */
    public final TableField<DictEventColumnModifyRecord, String> ODL_COLUMN_SCRITP = createField("odl_column_scritp", org.jooq.impl.SQLDataType.CLOB, this, "原属性脚本");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.new_column_name</code>. 新属性名称
     */
    public final TableField<DictEventColumnModifyRecord, String> NEW_COLUMN_NAME = createField("new_column_name", org.jooq.impl.SQLDataType.CLOB, this, "新属性名称");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.new_column_code</code>. 新属性code
     */
    public final TableField<DictEventColumnModifyRecord, String> NEW_COLUMN_CODE = createField("new_column_code", org.jooq.impl.SQLDataType.CLOB, this, "新属性code");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.new_column_script</code>. 新属性脚本
     */
    public final TableField<DictEventColumnModifyRecord, String> NEW_COLUMN_SCRIPT = createField("new_column_script", org.jooq.impl.SQLDataType.CLOB, this, "新属性脚本");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.modify_batch</code>. 修改批次
     */
    public final TableField<DictEventColumnModifyRecord, String> MODIFY_BATCH = createField("modify_batch", org.jooq.impl.SQLDataType.CLOB, this, "修改批次");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.rule_is_modify</code>. 规则是否修改完成
     */
    public final TableField<DictEventColumnModifyRecord, String> RULE_IS_MODIFY = createField("rule_is_modify", org.jooq.impl.SQLDataType.CLOB, this, "规则是否修改完成");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.indi_is_modify</code>. 指标是否修改完成
     */
    public final TableField<DictEventColumnModifyRecord, String> INDI_IS_MODIFY = createField("indi_is_modify", org.jooq.impl.SQLDataType.CLOB, this, "指标是否修改完成");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.table_is_modify</code>. 表是否调整完成
     */
    public final TableField<DictEventColumnModifyRecord, String> TABLE_IS_MODIFY = createField("table_is_modify", org.jooq.impl.SQLDataType.CLOB, this, "表是否调整完成");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.remark</code>. 说明
     */
    public final TableField<DictEventColumnModifyRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.CLOB, this, "说明");

    /**
     * The column <code>SMETA_APP.dict_event_column_modify.status</code>. 状态
     */
    public final TableField<DictEventColumnModifyRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB, this, "状态");

    /**
     * Create a <code>SMETA_APP.dict_event_column_modify</code> table reference
     */
    public DictEventColumnModify() {
        this(DSL.name("dict_event_column_modify"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_event_column_modify</code> table reference
     */
    public DictEventColumnModify(String alias) {
        this(DSL.name(alias), DICT_EVENT_COLUMN_MODIFY);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_event_column_modify</code> table reference
     */
    public DictEventColumnModify(Name alias) {
        this(alias, DICT_EVENT_COLUMN_MODIFY);
    }

    private DictEventColumnModify(Name alias, Table<DictEventColumnModifyRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictEventColumnModify(Name alias, Table<DictEventColumnModifyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "数据字典表修改确认");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_EVENT_COLUMN_MODIFY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictEventColumnModifyRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_EVENT_COLUMN_MODIFY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictEventColumnModifyRecord> getPrimaryKey() {
        return Keys.KEY_DICT_EVENT_COLUMN_MODIFY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictEventColumnModifyRecord>> getKeys() {
        return Arrays.<UniqueKey<DictEventColumnModifyRecord>>asList(Keys.KEY_DICT_EVENT_COLUMN_MODIFY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEventColumnModify as(String alias) {
        return new DictEventColumnModify(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEventColumnModify as(Name alias) {
        return new DictEventColumnModify(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEventColumnModify rename(String name) {
        return new DictEventColumnModify(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEventColumnModify rename(Name name) {
        return new DictEventColumnModify(name, null);
    }
}
