/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcIndicatorCalculateOnceRecord;


/**
 * 指标一次性计算
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcIndicatorCalculateOnce extends TableImpl<CalcIndicatorCalculateOnceRecord> {

    private static final long serialVersionUID = -231961840;

    /**
     * The reference instance of <code>SMETA_APP.calc_indicator_calculate_once</code>
     */
    public static final CalcIndicatorCalculateOnce CALC_INDICATOR_CALCULATE_ONCE = new CalcIndicatorCalculateOnce();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcIndicatorCalculateOnceRecord> getRecordType() {
        return CalcIndicatorCalculateOnceRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.id</code>. 主键
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.gmt_create</code>. 创建时间
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.gmt_modified</code>. 修改时间
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.created_by</code>. 创建人
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "创建人");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.updated_by</code>. 修改人
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "修改人");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.indicator_code</code>. 指标编码
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> INDICATOR_CODE = createField("indicator_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.indicator_name</code>. 指标名称
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> INDICATOR_NAME = createField("indicator_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "指标名称");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.table_name</code>. 计算事件上云表
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "计算事件上云表");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calculate_event</code>. 计算事件编码
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALCULATE_EVENT = createField("calculate_event", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "计算事件编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calculate_model</code>. 计算模式：事件级，窗口级
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALCULATE_MODEL = createField("calculate_model", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "计算模式：事件级，窗口级");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calc_frequency</code>. 计算频率：110一次性按天，112一次性按小时
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, Integer> CALC_FREQUENCY = createField("calc_frequency", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "计算频率：110一次性按天，112一次性按小时");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.groupby</code>. 指标主键集合
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> GROUPBY = createField("groupby", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "指标主键集合");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.store_table</code>. 指标结果存储表
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> STORE_TABLE = createField("store_table", org.jooq.impl.SQLDataType.VARCHAR(128), this, "指标结果存储表");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calculate_code</code>. 计算编码
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALCULATE_CODE = createField("calculate_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "计算编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.ddl_node_id</code>. DDL建表任务节点ID
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> DDL_NODE_ID = createField("ddl_node_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "DDL建表任务节点ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.ddl_sql</code>. DDL建表脚本
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> DDL_SQL = createField("ddl_sql", org.jooq.impl.SQLDataType.CLOB, this, "DDL建表脚本");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calc_node_id</code>. 计算任务节点ID
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALC_NODE_ID = createField("calc_node_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "计算任务节点ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calc_sql</code>. 计算任务脚本
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALC_SQL = createField("calc_sql", org.jooq.impl.SQLDataType.CLOB, this, "计算任务脚本");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.task_id</code>. 任务实例ID
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "任务实例ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calc_start_time</code>. 计算数据开始时间
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALC_START_TIME = createField("calc_start_time", org.jooq.impl.SQLDataType.VARCHAR(64), this, "计算数据开始时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calc_end_time</code>. 计算数据结束时间
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> CALC_END_TIME = createField("calc_end_time", org.jooq.impl.SQLDataType.VARCHAR(64), this, "计算数据结束时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.life_cycle</code>. 生命周期
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> LIFE_CYCLE = createField("life_cycle", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "生命周期");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.time_window</code>. 时间窗口
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> TIME_WINDOW = createField("time_window", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "时间窗口");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.calculate_status</code>. 任务状态： 1: "未运行",2: "等待时间", 3: "等待资源",4: "运行中",5: "运行失败",6: "运行成功"
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, Integer> CALCULATE_STATUS = createField("calculate_status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "任务状态： 1: \"未运行\",2: \"等待时间\", 3: \"等待资源\",4: \"运行中\",5: \"运行失败\",6: \"运行成功\"");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.indicator_uniq_code</code>. 指标唯一编码
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> INDICATOR_UNIQ_CODE = createField("indicator_uniq_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标唯一编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.indicator_rela_table</code>. 过滤表名
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> INDICATOR_RELA_TABLE = createField("indicator_rela_table", org.jooq.impl.SQLDataType.VARCHAR(128), this, "过滤表名");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.indicator_rela_key</code>. 指标主键映射字段集合
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, String> INDICATOR_RELA_KEY = createField("indicator_rela_key", org.jooq.impl.SQLDataType.VARCHAR(128), this, "指标主键映射字段集合");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.scene_id</code>. 所属分析场景
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, Long> SCENE_ID = createField("scene_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "所属分析场景");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate_once.table_status</code>. 指标结果表状态 1: "有效",0: "已过期"
     */
    public final TableField<CalcIndicatorCalculateOnceRecord, Integer> TABLE_STATUS = createField("table_status", org.jooq.impl.SQLDataType.INTEGER, this, "指标结果表状态 1: \"有效\",0: \"已过期\"");

    /**
     * Create a <code>SMETA_APP.calc_indicator_calculate_once</code> table reference
     */
    public CalcIndicatorCalculateOnce() {
        this(DSL.name("calc_indicator_calculate_once"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_calculate_once</code> table reference
     */
    public CalcIndicatorCalculateOnce(String alias) {
        this(DSL.name(alias), CALC_INDICATOR_CALCULATE_ONCE);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_calculate_once</code> table reference
     */
    public CalcIndicatorCalculateOnce(Name alias) {
        this(alias, CALC_INDICATOR_CALCULATE_ONCE);
    }

    private CalcIndicatorCalculateOnce(Name alias, Table<CalcIndicatorCalculateOnceRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcIndicatorCalculateOnce(Name alias, Table<CalcIndicatorCalculateOnceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标一次性计算");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_INDICATOR_CALCULATE_ONCE_IDX_SCENEID, Indexes.CALC_INDICATOR_CALCULATE_ONCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcIndicatorCalculateOnceRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_INDICATOR_CALCULATE_ONCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcIndicatorCalculateOnceRecord> getPrimaryKey() {
        return Keys.KEY_CALC_INDICATOR_CALCULATE_ONCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcIndicatorCalculateOnceRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcIndicatorCalculateOnceRecord>>asList(Keys.KEY_CALC_INDICATOR_CALCULATE_ONCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorCalculateOnce as(String alias) {
        return new CalcIndicatorCalculateOnce(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorCalculateOnce as(Name alias) {
        return new CalcIndicatorCalculateOnce(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorCalculateOnce rename(String name) {
        return new CalcIndicatorCalculateOnce(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorCalculateOnce rename(Name name) {
        return new CalcIndicatorCalculateOnce(name, null);
    }
}
