/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.EventMonitorRecord;


/**
 * 事件按天监控表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventMonitor extends TableImpl<EventMonitorRecord> {

    private static final long serialVersionUID = 743458502;

    /**
     * The reference instance of <code>SMETA_APP.event_monitor</code>
     */
    public static final EventMonitor EVENT_MONITOR = new EventMonitor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventMonitorRecord> getRecordType() {
        return EventMonitorRecord.class;
    }

    /**
     * The column <code>SMETA_APP.event_monitor.id</code>. 主键
     */
    public final TableField<EventMonitorRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.event_monitor.gmt_create</code>. 创建时间
     */
    public final TableField<EventMonitorRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.event_monitor.gmt_modified</code>. 修改时间
     */
    public final TableField<EventMonitorRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.event_monitor.biz_date</code>. 业务时间，格式：20160707
     */
    public final TableField<EventMonitorRecord, String> BIZ_DATE = createField("biz_date", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "业务时间，格式：20160707");

    /**
     * The column <code>SMETA_APP.event_monitor.event_code</code>. 事件编码
     */
    public final TableField<EventMonitorRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件编码");

    /**
     * The column <code>SMETA_APP.event_monitor.mtee_dispatch_cnt</code>. mtee分发量
     */
    public final TableField<EventMonitorRecord, Double> MTEE_DISPATCH_CNT = createField("mtee_dispatch_cnt", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.000", org.jooq.impl.SQLDataType.DOUBLE)), this, "mtee分发量");

    /**
     * The column <code>SMETA_APP.event_monitor.pisa_dispatch_cnt</code>. pisa分发量
     */
    public final TableField<EventMonitorRecord, Integer> PISA_DISPATCH_CNT = createField("pisa_dispatch_cnt", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "pisa分发量");

    /**
     * The column <code>SMETA_APP.event_monitor.sevent_deal_cnt</code>. sevent处理量
     */
    public final TableField<EventMonitorRecord, Integer> SEVENT_DEAL_CNT = createField("sevent_deal_cnt", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "sevent处理量");

    /**
     * The column <code>SMETA_APP.event_monitor.datahub_write_cnt</code>. datahub上云量
     */
    public final TableField<EventMonitorRecord, Integer> DATAHUB_WRITE_CNT = createField("datahub_write_cnt", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "datahub上云量");

    /**
     * The column <code>SMETA_APP.event_monitor.hbase_write_cnt</code>. hbase写入量
     */
    public final TableField<EventMonitorRecord, Integer> HBASE_WRITE_CNT = createField("hbase_write_cnt", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "hbase写入量");

    /**
     * Create a <code>SMETA_APP.event_monitor</code> table reference
     */
    public EventMonitor() {
        this(DSL.name("event_monitor"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.event_monitor</code> table reference
     */
    public EventMonitor(String alias) {
        this(DSL.name(alias), EVENT_MONITOR);
    }

    /**
     * Create an aliased <code>SMETA_APP.event_monitor</code> table reference
     */
    public EventMonitor(Name alias) {
        this(alias, EVENT_MONITOR);
    }

    private EventMonitor(Name alias, Table<EventMonitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventMonitor(Name alias, Table<EventMonitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "事件按天监控表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_MONITOR_IDX_EVENT_CODE_BIZ_DATE, Indexes.EVENT_MONITOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventMonitorRecord, ULong> getIdentity() {
        return Keys.IDENTITY_EVENT_MONITOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventMonitorRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_MONITOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventMonitorRecord>> getKeys() {
        return Arrays.<UniqueKey<EventMonitorRecord>>asList(Keys.KEY_EVENT_MONITOR_PRIMARY, Keys.KEY_EVENT_MONITOR_IDX_EVENT_CODE_BIZ_DATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventMonitor as(String alias) {
        return new EventMonitor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventMonitor as(Name alias) {
        return new EventMonitor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventMonitor rename(String name) {
        return new EventMonitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventMonitor rename(Name name) {
        return new EventMonitor(name, null);
    }
}
