/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DqcEventTableRecord;


/**
 * dqc事件配置对应表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DqcEventTable extends TableImpl<DqcEventTableRecord> {

    private static final long serialVersionUID = -2061779428;

    /**
     * The reference instance of <code>SMETA_APP.dqc_event_table</code>
     */
    public static final DqcEventTable DQC_EVENT_TABLE = new DqcEventTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DqcEventTableRecord> getRecordType() {
        return DqcEventTableRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dqc_event_table.id</code>. 主键
     */
    public final TableField<DqcEventTableRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dqc_event_table.gmt_create</code>. 创建时间
     */
    public final TableField<DqcEventTableRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dqc_event_table.gmt_modified</code>. 修改时间
     */
    public final TableField<DqcEventTableRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dqc_event_table.event_code</code>. 事件编码
     */
    public final TableField<DqcEventTableRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件编码");

    /**
     * The column <code>SMETA_APP.dqc_event_table.table_name</code>. 表名
     */
    public final TableField<DqcEventTableRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "表名");

    /**
     * The column <code>SMETA_APP.dqc_event_table.status</code>. 状态，1-有效，0-无效
     */
    public final TableField<DqcEventTableRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态，1-有效，0-无效");

    /**
     * The column <code>SMETA_APP.dqc_event_table.event_name</code>. 事件名称
     */
    public final TableField<DqcEventTableRecord, String> EVENT_NAME = createField("event_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件名称");

    /**
     * The column <code>SMETA_APP.dqc_event_table.rule_count</code>. 规则总数
     */
    public final TableField<DqcEventTableRecord, Integer> RULE_COUNT = createField("rule_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "规则总数");

    /**
     * The column <code>SMETA_APP.dqc_event_table.auto_config</code>. 是否自动化配置，1-是，0-不是
     */
    public final TableField<DqcEventTableRecord, Integer> AUTO_CONFIG = createField("auto_config", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "是否自动化配置，1-是，0-不是");

    /**
     * Create a <code>SMETA_APP.dqc_event_table</code> table reference
     */
    public DqcEventTable() {
        this(DSL.name("dqc_event_table"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dqc_event_table</code> table reference
     */
    public DqcEventTable(String alias) {
        this(DSL.name(alias), DQC_EVENT_TABLE);
    }

    /**
     * Create an aliased <code>SMETA_APP.dqc_event_table</code> table reference
     */
    public DqcEventTable(Name alias) {
        this(alias, DQC_EVENT_TABLE);
    }

    private DqcEventTable(Name alias, Table<DqcEventTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private DqcEventTable(Name alias, Table<DqcEventTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "dqc事件配置对应表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DQC_EVENT_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DqcEventTableRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DQC_EVENT_TABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DqcEventTableRecord> getPrimaryKey() {
        return Keys.KEY_DQC_EVENT_TABLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DqcEventTableRecord>> getKeys() {
        return Arrays.<UniqueKey<DqcEventTableRecord>>asList(Keys.KEY_DQC_EVENT_TABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DqcEventTable as(String alias) {
        return new DqcEventTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DqcEventTable as(Name alias) {
        return new DqcEventTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DqcEventTable rename(String name) {
        return new DqcEventTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DqcEventTable rename(Name name) {
        return new DqcEventTable(name, null);
    }
}
