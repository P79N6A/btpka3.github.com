/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcDatasourceRecord;


/**
 * 数据源表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcDatasource extends TableImpl<CalcDatasourceRecord> {

    private static final long serialVersionUID = -876214997;

    /**
     * The reference instance of <code>SMETA_APP.calc_datasource</code>
     */
    public static final CalcDatasource CALC_DATASOURCE = new CalcDatasource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcDatasourceRecord> getRecordType() {
        return CalcDatasourceRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_datasource.id</code>. 主键
     */
    public final TableField<CalcDatasourceRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_datasource.gmt_create</code>. 创建时间
     */
    public final TableField<CalcDatasourceRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.calc_datasource.gmt_modified</code>. 修改时间
     */
    public final TableField<CalcDatasourceRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.calc_datasource.created_by</code>. 创建人
     */
    public final TableField<CalcDatasourceRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "创建人");

    /**
     * The column <code>SMETA_APP.calc_datasource.updated_by</code>. 最后修改人
     */
    public final TableField<CalcDatasourceRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(64), this, "最后修改人");

    /**
     * The column <code>SMETA_APP.calc_datasource.code</code>. 数据源编码
     */
    public final TableField<CalcDatasourceRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "数据源编码");

    /**
     * The column <code>SMETA_APP.calc_datasource.name</code>. 数据源名称
     */
    public final TableField<CalcDatasourceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "数据源名称");

    /**
     * The column <code>SMETA_APP.calc_datasource.type</code>. 数据源类型
     */
    public final TableField<CalcDatasourceRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "数据源类型");

    /**
     * The column <code>SMETA_APP.calc_datasource.description</code>. 描述
     */
    public final TableField<CalcDatasourceRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "描述");

    /**
     * The column <code>SMETA_APP.calc_datasource.name_space</code>. tair namespace
     */
    public final TableField<CalcDatasourceRecord, String> NAME_SPACE = createField("name_space", org.jooq.impl.SQLDataType.VARCHAR(16), this, "tair namespace");

    /**
     * The column <code>SMETA_APP.calc_datasource.config_id</code>. tair configid
     */
    public final TableField<CalcDatasourceRecord, String> CONFIG_ID = createField("config_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "tair configid");

    /**
     * The column <code>SMETA_APP.calc_datasource.is_effective</code>. 状态
     */
    public final TableField<CalcDatasourceRecord, Byte> IS_EFFECTIVE = createField("is_effective", org.jooq.impl.SQLDataType.TINYINT, this, "状态");

    /**
     * The column <code>SMETA_APP.calc_datasource.area_code</code>. 区域编码
     */
    public final TableField<CalcDatasourceRecord, String> AREA_CODE = createField("area_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "区域编码");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_zk_quorum</code>. hbase zk quorum
     */
    public final TableField<CalcDatasourceRecord, String> HB_ZK_QUORUM = createField("hb_zk_quorum", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "hbase zk quorum");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_zk_port</code>. hbase zk port
     */
    public final TableField<CalcDatasourceRecord, String> HB_ZK_PORT = createField("hb_zk_port", org.jooq.impl.SQLDataType.VARCHAR(64), this, "hbase zk port");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_zk_parent</code>. hbase zk parent
     */
    public final TableField<CalcDatasourceRecord, String> HB_ZK_PARENT = createField("hb_zk_parent", org.jooq.impl.SQLDataType.VARCHAR(64), this, "hbase zk parent");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_pool_size</code>. hbase pool size
     */
    public final TableField<CalcDatasourceRecord, Integer> HB_POOL_SIZE = createField("hb_pool_size", org.jooq.impl.SQLDataType.INTEGER, this, "hbase pool size");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_scan_cache_rows</code>. hbase scan cache rows
     */
    public final TableField<CalcDatasourceRecord, Integer> HB_SCAN_CACHE_ROWS = createField("hb_scan_cache_rows", org.jooq.impl.SQLDataType.INTEGER, this, "hbase scan cache rows");

    /**
     * The column <code>SMETA_APP.calc_datasource.indi_type</code>. 用户实时、离线指标存储
     */
    public final TableField<CalcDatasourceRecord, String> INDI_TYPE = createField("indi_type", org.jooq.impl.SQLDataType.VARCHAR(64), this, "用户实时、离线指标存储");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_table_name</code>. hbase table name
     */
    public final TableField<CalcDatasourceRecord, String> HB_TABLE_NAME = createField("hb_table_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "hbase table name");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_write_path</code>. hbase 写入目录
     */
    public final TableField<CalcDatasourceRecord, String> HB_WRITE_PATH = createField("hb_write_path", org.jooq.impl.SQLDataType.VARCHAR(128), this, "hbase 写入目录");

    /**
     * The column <code>SMETA_APP.calc_datasource.hb_configs</code>. hbase 同步配置
     */
    public final TableField<CalcDatasourceRecord, String> HB_CONFIGS = createField("hb_configs", org.jooq.impl.SQLDataType.CLOB, this, "hbase 同步配置");

    /**
     * Create a <code>SMETA_APP.calc_datasource</code> table reference
     */
    public CalcDatasource() {
        this(DSL.name("calc_datasource"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_datasource</code> table reference
     */
    public CalcDatasource(String alias) {
        this(DSL.name(alias), CALC_DATASOURCE);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_datasource</code> table reference
     */
    public CalcDatasource(Name alias) {
        this(alias, CALC_DATASOURCE);
    }

    private CalcDatasource(Name alias, Table<CalcDatasourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcDatasource(Name alias, Table<CalcDatasourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "数据源表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_DATASOURCE_IDX_CODE, Indexes.CALC_DATASOURCE_IDX_ISF, Indexes.CALC_DATASOURCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcDatasourceRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_DATASOURCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcDatasourceRecord> getPrimaryKey() {
        return Keys.KEY_CALC_DATASOURCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcDatasourceRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcDatasourceRecord>>asList(Keys.KEY_CALC_DATASOURCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcDatasource as(String alias) {
        return new CalcDatasource(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcDatasource as(Name alias) {
        return new CalcDatasource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcDatasource rename(String name) {
        return new CalcDatasource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcDatasource rename(Name name) {
        return new CalcDatasource(name, null);
    }
}
