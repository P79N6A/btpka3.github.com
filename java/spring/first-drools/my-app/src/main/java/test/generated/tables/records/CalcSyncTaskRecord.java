/*
 * This file is generated by jOOQ.
*/
package test.generated.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;

import test.generated.tables.CalcSyncTask;


/**
 * 离线指标线上化同步任务
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcSyncTaskRecord extends UpdatableRecordImpl<CalcSyncTaskRecord> {

    private static final long serialVersionUID = 599296280;

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.id</code>. 主键
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.id</code>. 主键
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.gmt_create</code>. 创建时间
     */
    public void setGmtCreate(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.gmt_create</code>. 创建时间
     */
    public Timestamp getGmtCreate() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.gmt_modified</code>. 修改时间
     */
    public void setGmtModified(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.gmt_modified</code>. 修改时间
     */
    public Timestamp getGmtModified() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.realtime_fetch_code</code>. 实时取数code：a-z规则
     */
    public void setRealtimeFetchCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.realtime_fetch_code</code>. 实时取数code：a-z规则
     */
    public String getRealtimeFetchCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.indicator_code</code>. 指标code
     */
    public void setIndicatorCode(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.indicator_code</code>. 指标code
     */
    public String getIndicatorCode() {
        return (String) get(4);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.indicator_name</code>. 指标名称
     */
    public void setIndicatorName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.indicator_name</code>. 指标名称
     */
    public String getIndicatorName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.source_table_name</code>. 源表表名
     */
    public void setSourceTableName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.source_table_name</code>. 源表表名
     */
    public String getSourceTableName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.time_window</code>. 时间窗口
     */
    public void setTimeWindow(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.time_window</code>. 时间窗口
     */
    public String getTimeWindow() {
        return (String) get(7);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.created_by</code>. 创建人
     */
    public void setCreatedBy(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.created_by</code>. 创建人
     */
    public String getCreatedBy() {
        return (String) get(8);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.updated_by</code>. 修改人
     */
    public void setUpdatedBy(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.updated_by</code>. 修改人
     */
    public String getUpdatedBy() {
        return (String) get(9);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.calculate_status</code>. 增量计算转换任务状态：\n已删除0，等待中1，运行中2
     */
    public void setCalculateStatus(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.calculate_status</code>. 增量计算转换任务状态：\n已删除0，等待中1，运行中2
     */
    public Integer getCalculateStatus() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.sync_status</code>. 同步任务状态：\n已删除0，等待中1，运行中2
     */
    public void setSyncStatus(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.sync_status</code>. 同步任务状态：\n已删除0，等待中1，运行中2
     */
    public Integer getSyncStatus() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.odps_node_id</code>. odps类型节点id
     */
    public void setOdpsNodeId(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.odps_node_id</code>. odps类型节点id
     */
    public String getOdpsNodeId() {
        return (String) get(12);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.dsc_node_id</code>. 同步任务节点id
     */
    public void setDscNodeId(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.dsc_node_id</code>. 同步任务节点id
     */
    public String getDscNodeId() {
        return (String) get(13);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.job_id</code>. datax3配置任务id
     */
    public void setJobId(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.job_id</code>. datax3配置任务id
     */
    public String getJobId() {
        return (String) get(14);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.job_version</code>. datax3配置任务id对应的版本
     */
    public void setJobVersion(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.job_version</code>. datax3配置任务id对应的版本
     */
    public String getJobVersion() {
        return (String) get(15);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.total_sync_mark</code>. 指标全量同步字段，1：是 2：否
     */
    public void setTotalSyncMark(Integer value) {
        set(16, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.total_sync_mark</code>. 指标全量同步字段，1：是 2：否
     */
    public Integer getTotalSyncMark() {
        return (Integer) get(16);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.ddl_task_id</code>. DDL建表任务ID
     */
    public void setDdlTaskId(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.ddl_task_id</code>. DDL建表任务ID
     */
    public String getDdlTaskId() {
        return (String) get(17);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.odps_sql</code>. ODPS SQL
     */
    public void setOdpsSql(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.odps_sql</code>. ODPS SQL
     */
    public String getOdpsSql() {
        return (String) get(18);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.job_config_json</code>. Job配置
     */
    public void setJobConfigJson(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.job_config_json</code>. Job配置
     */
    public String getJobConfigJson() {
        return (String) get(19);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.datasource_code</code>. 数据源编码
     */
    public void setDatasourceCode(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.datasource_code</code>. 数据源编码
     */
    public String getDatasourceCode() {
        return (String) get(20);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.datasource_type</code>. 数据源类型
     */
    public void setDatasourceType(String value) {
        set(21, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.datasource_type</code>. 数据源类型
     */
    public String getDatasourceType() {
        return (String) get(21);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.source_table_count</code>. 该分组源表个数
     */
    public void setSourceTableCount(Integer value) {
        set(22, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.source_table_count</code>. 该分组源表个数
     */
    public Integer getSourceTableCount() {
        return (Integer) get(22);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.group_key</code>. 任务分组编码
     */
    public void setGroupKey(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.group_key</code>. 任务分组编码
     */
    public String getGroupKey() {
        return (String) get(23);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.delta_batch</code>. delta拆分任务数
     */
    public void setDeltaBatch(Integer value) {
        set(24, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.delta_batch</code>. delta拆分任务数
     */
    public Integer getDeltaBatch() {
        return (Integer) get(24);
    }

    /**
     * Setter for <code>SMETA_APP.calc_sync_task.hbase_temp_version</code>. 同步hbase模板版本：v1，v2
     */
    public void setHbaseTempVersion(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>SMETA_APP.calc_sync_task.hbase_temp_version</code>. 同步hbase模板版本：v1，v2
     */
    public String getHbaseTempVersion() {
        return (String) get(25);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CalcSyncTaskRecord
     */
    public CalcSyncTaskRecord() {
        super(CalcSyncTask.CALC_SYNC_TASK);
    }

    /**
     * Create a detached, initialised CalcSyncTaskRecord
     */
    public CalcSyncTaskRecord(ULong id, Timestamp gmtCreate, Timestamp gmtModified, String realtimeFetchCode, String indicatorCode, String indicatorName, String sourceTableName, String timeWindow, String createdBy, String updatedBy, Integer calculateStatus, Integer syncStatus, String odpsNodeId, String dscNodeId, String jobId, String jobVersion, Integer totalSyncMark, String ddlTaskId, String odpsSql, String jobConfigJson, String datasourceCode, String datasourceType, Integer sourceTableCount, String groupKey, Integer deltaBatch, String hbaseTempVersion) {
        super(CalcSyncTask.CALC_SYNC_TASK);

        set(0, id);
        set(1, gmtCreate);
        set(2, gmtModified);
        set(3, realtimeFetchCode);
        set(4, indicatorCode);
        set(5, indicatorName);
        set(6, sourceTableName);
        set(7, timeWindow);
        set(8, createdBy);
        set(9, updatedBy);
        set(10, calculateStatus);
        set(11, syncStatus);
        set(12, odpsNodeId);
        set(13, dscNodeId);
        set(14, jobId);
        set(15, jobVersion);
        set(16, totalSyncMark);
        set(17, ddlTaskId);
        set(18, odpsSql);
        set(19, jobConfigJson);
        set(20, datasourceCode);
        set(21, datasourceType);
        set(22, sourceTableCount);
        set(23, groupKey);
        set(24, deltaBatch);
        set(25, hbaseTempVersion);
    }
}
