/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.EventHistoreConfigRecord;


/**
 * 事件HiStore配置信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventHistoreConfig extends TableImpl<EventHistoreConfigRecord> {

    private static final long serialVersionUID = 1259727723;

    /**
     * The reference instance of <code>SMETA_APP.event_histore_config</code>
     */
    public static final EventHistoreConfig EVENT_HISTORE_CONFIG = new EventHistoreConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventHistoreConfigRecord> getRecordType() {
        return EventHistoreConfigRecord.class;
    }

    /**
     * The column <code>SMETA_APP.event_histore_config.id</code>. 主键
     */
    public final TableField<EventHistoreConfigRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.event_histore_config.gmt_create</code>. 创建时间
     */
    public final TableField<EventHistoreConfigRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.event_histore_config.gmt_modified</code>. 修改时间
     */
    public final TableField<EventHistoreConfigRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.event_histore_config.event_code</code>. 事件code
     */
    public final TableField<EventHistoreConfigRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件code");

    /**
     * The column <code>SMETA_APP.event_histore_config.histore_table</code>. HiStore表名
     */
    public final TableField<EventHistoreConfigRecord, String> HISTORE_TABLE = createField("histore_table", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "HiStore表名");

    /**
     * The column <code>SMETA_APP.event_histore_config.lifecycle</code>. 表生命周期
     */
    public final TableField<EventHistoreConfigRecord, Integer> LIFECYCLE = createField("lifecycle", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "表生命周期");

    /**
     * The column <code>SMETA_APP.event_histore_config.status</code>. 状态，-1：废弃，0：初始化状态，不做任何处理，1：转换校验，2：正式写入
     */
    public final TableField<EventHistoreConfigRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "状态，-1：废弃，0：初始化状态，不做任何处理，1：转换校验，2：正式写入");

    /**
     * Create a <code>SMETA_APP.event_histore_config</code> table reference
     */
    public EventHistoreConfig() {
        this(DSL.name("event_histore_config"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.event_histore_config</code> table reference
     */
    public EventHistoreConfig(String alias) {
        this(DSL.name(alias), EVENT_HISTORE_CONFIG);
    }

    /**
     * Create an aliased <code>SMETA_APP.event_histore_config</code> table reference
     */
    public EventHistoreConfig(Name alias) {
        this(alias, EVENT_HISTORE_CONFIG);
    }

    private EventHistoreConfig(Name alias, Table<EventHistoreConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventHistoreConfig(Name alias, Table<EventHistoreConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "事件HiStore配置信息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_HISTORE_CONFIG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventHistoreConfigRecord, ULong> getIdentity() {
        return Keys.IDENTITY_EVENT_HISTORE_CONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventHistoreConfigRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_HISTORE_CONFIG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventHistoreConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<EventHistoreConfigRecord>>asList(Keys.KEY_EVENT_HISTORE_CONFIG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHistoreConfig as(String alias) {
        return new EventHistoreConfig(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventHistoreConfig as(Name alias) {
        return new EventHistoreConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventHistoreConfig rename(String name) {
        return new EventHistoreConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventHistoreConfig rename(Name name) {
        return new EventHistoreConfig(name, null);
    }
}
