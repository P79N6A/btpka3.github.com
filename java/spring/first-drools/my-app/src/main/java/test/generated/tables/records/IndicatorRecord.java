/*
 * This file is generated by jOOQ.
*/
package test.generated.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.Indicator;


/**
 * 指标定义表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorRecord extends UpdatableRecordImpl<IndicatorRecord> {

    private static final long serialVersionUID = 1070801869;

    /**
     * Setter for <code>SMETA_APP.indicator.id</code>. 主键
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.id</code>. 主键
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.gmt_create</code>. 创建时间
     */
    public void setGmtCreate(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.gmt_create</code>. 创建时间
     */
    public Timestamp getGmtCreate() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.gmt_modified</code>. 修改时间
     */
    public void setGmtModified(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.gmt_modified</code>. 修改时间
     */
    public Timestamp getGmtModified() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.name</code>. 指标名
     */
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.name</code>. 指标名
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.code</code>. 指标对应的唯一代码
     */
    public void setCode(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.code</code>. 指标对应的唯一代码
     */
    public String getCode() {
        return (String) get(4);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.description</code>. 指标描述
     */
    public void setDescription(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.description</code>. 指标描述
     */
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.is_effective</code>. 指标状态：0无效或已删除，1有效，2草稿，3审批中
     */
    public void setIsEffective(Byte value) {
        set(6, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.is_effective</code>. 指标状态：0无效或已删除，1有效，2草稿，3审批中
     */
    public Byte getIsEffective() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.created_by</code>. 指标创建者
     */
    public void setCreatedBy(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.created_by</code>. 指标创建者
     */
    public String getCreatedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.updated_by</code>. 指标更新者
     */
    public void setUpdatedBy(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.updated_by</code>. 指标更新者
     */
    public String getUpdatedBy() {
        return (String) get(8);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.owner</code>. 指标负责人
     */
    public void setOwner(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.owner</code>. 指标负责人
     */
    public String getOwner() {
        return (String) get(9);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.status</code>. 指标状态（废弃）
     */
    public void setStatus(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.status</code>. 指标状态（废弃）
     */
    public String getStatus() {
        return (String) get(10);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.extends_from</code>. 指标派生源（废弃）
     */
    public void setExtendsFrom(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.extends_from</code>. 指标派生源（废弃）
     */
    public Long getExtendsFrom() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.algorithm</code>. 指标算法
     */
    public void setAlgorithm(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.algorithm</code>. 指标算法
     */
    public String getAlgorithm() {
        return (String) get(12);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.source</code>. 指标来源（废弃）
     */
    public void setSource(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.source</code>. 指标来源（废弃）
     */
    public String getSource() {
        return (String) get(13);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.owner_id</code>. 指标负责人ID
     */
    public void setOwnerId(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.owner_id</code>. 指标负责人ID
     */
    public String getOwnerId() {
        return (String) get(14);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.user_defined_data</code>. 自定义数据(json格式)
     */
    public void setUserDefinedData(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.user_defined_data</code>. 自定义数据(json格式)
     */
    public String getUserDefinedData() {
        return (String) get(15);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.particle</code>. 指标粒度
     */
    public void setParticle(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.particle</code>. 指标粒度
     */
    public String getParticle() {
        return (String) get(16);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.time_window</code>. 时间窗口
     */
    public void setTimeWindow(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.time_window</code>. 时间窗口
     */
    public String getTimeWindow() {
        return (String) get(17);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.static_subject</code>. 统计主体
     */
    public void setStaticSubject(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.static_subject</code>. 统计主体
     */
    public String getStaticSubject() {
        return (String) get(18);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.static_type</code>. 统计类型
     */
    public void setStaticType(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.static_type</code>. 统计类型
     */
    public String getStaticType() {
        return (String) get(19);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.event</code>. 指标事件，用于生成二级类目
     */
    public void setEvent(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.event</code>. 指标事件，用于生成二级类目
     */
    public String getEvent() {
        return (String) get(20);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.life_cycle</code>. 生命周期
     */
    public void setLifeCycle(String value) {
        set(21, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.life_cycle</code>. 生命周期
     */
    public String getLifeCycle() {
        return (String) get(21);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.biz_name</code>. 业务名称
     */
    public void setBizName(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.biz_name</code>. 业务名称
     */
    public String getBizName() {
        return (String) get(22);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.biz_code</code>. 业务名称
     */
    public void setBizCode(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.biz_code</code>. 业务名称
     */
    public String getBizCode() {
        return (String) get(23);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.formal_name</code>. 规范化名称
     */
    public void setFormalName(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.formal_name</code>. 规范化名称
     */
    public String getFormalName() {
        return (String) get(24);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.group_code</code>. 合并分组编码
     */
    public void setGroupCode(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.group_code</code>. 合并分组编码
     */
    public String getGroupCode() {
        return (String) get(25);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.old_code</code>. 业务代码，兼容老数据
     */
    public void setOldCode(String value) {
        set(26, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.old_code</code>. 业务代码，兼容老数据
     */
    public String getOldCode() {
        return (String) get(26);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.workspace_code</code>. 所属的系统空间的编码，区分离线指标，实时指标
     */
    public void setWorkspaceCode(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.workspace_code</code>. 所属的系统空间的编码，区分离线指标，实时指标
     */
    public String getWorkspaceCode() {
        return (String) get(27);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.caculation_event</code>. 计算事件
     */
    public void setCaculationEvent(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.caculation_event</code>. 计算事件
     */
    public String getCaculationEvent() {
        return (String) get(28);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.condition_type</code>. 条件配置方式：config配置模式，codeing码农模式。
     */
    public void setConditionType(String value) {
        set(29, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.condition_type</code>. 条件配置方式：config配置模式，codeing码农模式。
     */
    public String getConditionType() {
        return (String) get(29);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.condition_json</code>. 配置模式，JOSN格式条件配置数据，用于修改回显。
     */
    public void setConditionJson(String value) {
        set(30, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.condition_json</code>. 配置模式，JOSN格式条件配置数据，用于修改回显。
     */
    public String getConditionJson() {
        return (String) get(30);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.level</code>. 业务等级：P1，P2，P3，P4
     */
    public void setLevel(String value) {
        set(31, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.level</code>. 业务等级：P1，P2，P3，P4
     */
    public String getLevel() {
        return (String) get(31);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.threshold</code>. 时间窗口计算阀值
     */
    public void setThreshold(Integer value) {
        set(32, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.threshold</code>. 时间窗口计算阀值
     */
    public Integer getThreshold() {
        return (Integer) get(32);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.business_workspace</code>. 使用场景
     */
    public void setBusinessWorkspace(String value) {
        set(33, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.business_workspace</code>. 使用场景
     */
    public String getBusinessWorkspace() {
        return (String) get(33);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.business_category</code>. 类目分类
     */
    public void setBusinessCategory(String value) {
        set(34, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.business_category</code>. 类目分类
     */
    public String getBusinessCategory() {
        return (String) get(34);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.new_config</code>. 是否统一指标配置入口：1是，空或0 不是
     */
    public void setNewConfig(Integer value) {
        set(35, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.new_config</code>. 是否统一指标配置入口：1是，空或0 不是
     */
    public Integer getNewConfig() {
        return (Integer) get(35);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.columns</code>. 规则中用到属性，多个属性逗号分隔
     */
    public void setColumns(String value) {
        set(36, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.columns</code>. 规则中用到属性，多个属性逗号分隔
     */
    public String getColumns() {
        return (String) get(36);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.tenant_code</code>. 租户code
     */
    public void setTenantCode(String value) {
        set(37, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.tenant_code</code>. 租户code
     */
    public String getTenantCode() {
        return (String) get(37);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.is_sync</code>. 是否同步指标，0-否，1-是
     */
    public void setIsSync(Byte value) {
        set(38, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.is_sync</code>. 是否同步指标，0-否，1-是
     */
    public Byte getIsSync() {
        return (Byte) get(38);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.is_calculate_indi</code>. 是否计算指标,0-否,1-是
     */
    public void setIsCalculateIndi(Byte value) {
        set(39, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.is_calculate_indi</code>. 是否计算指标,0-否,1-是
     */
    public Byte getIsCalculateIndi() {
        return (Byte) get(39);
    }

    /**
     * Setter for <code>SMETA_APP.indicator.calculate_indi_code</code>. 非计算指标对应的计算指标code
     */
    public void setCalculateIndiCode(String value) {
        set(40, value);
    }

    /**
     * Getter for <code>SMETA_APP.indicator.calculate_indi_code</code>. 非计算指标对应的计算指标code
     */
    public String getCalculateIndiCode() {
        return (String) get(40);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IndicatorRecord
     */
    public IndicatorRecord() {
        super(Indicator.INDICATOR);
    }

    /**
     * Create a detached, initialised IndicatorRecord
     */
    public IndicatorRecord(Long id, Timestamp gmtCreate, Timestamp gmtModified, String name, String code, String description, Byte isEffective, String createdBy, String updatedBy, String owner, String status, Long extendsFrom, String algorithm, String source, String ownerId, String userDefinedData, String particle, String timeWindow, String staticSubject, String staticType, String event, String lifeCycle, String bizName, String bizCode, String formalName, String groupCode, String oldCode, String workspaceCode, String caculationEvent, String conditionType, String conditionJson, String level, Integer threshold, String businessWorkspace, String businessCategory, Integer newConfig, String columns, String tenantCode, Byte isSync, Byte isCalculateIndi, String calculateIndiCode) {
        super(Indicator.INDICATOR);

        set(0, id);
        set(1, gmtCreate);
        set(2, gmtModified);
        set(3, name);
        set(4, code);
        set(5, description);
        set(6, isEffective);
        set(7, createdBy);
        set(8, updatedBy);
        set(9, owner);
        set(10, status);
        set(11, extendsFrom);
        set(12, algorithm);
        set(13, source);
        set(14, ownerId);
        set(15, userDefinedData);
        set(16, particle);
        set(17, timeWindow);
        set(18, staticSubject);
        set(19, staticType);
        set(20, event);
        set(21, lifeCycle);
        set(22, bizName);
        set(23, bizCode);
        set(24, formalName);
        set(25, groupCode);
        set(26, oldCode);
        set(27, workspaceCode);
        set(28, caculationEvent);
        set(29, conditionType);
        set(30, conditionJson);
        set(31, level);
        set(32, threshold);
        set(33, businessWorkspace);
        set(34, businessCategory);
        set(35, newConfig);
        set(36, columns);
        set(37, tenantCode);
        set(38, isSync);
        set(39, isCalculateIndi);
        set(40, calculateIndiCode);
    }
}
