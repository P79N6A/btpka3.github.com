/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.SparkCtxInfoRecord;


/**
 * spark context 信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SparkCtxInfo extends TableImpl<SparkCtxInfoRecord> {

    private static final long serialVersionUID = -1512851619;

    /**
     * The reference instance of <code>SMETA_APP.spark_ctx_info</code>
     */
    public static final SparkCtxInfo SPARK_CTX_INFO = new SparkCtxInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SparkCtxInfoRecord> getRecordType() {
        return SparkCtxInfoRecord.class;
    }

    /**
     * The column <code>SMETA_APP.spark_ctx_info.id</code>. 主键
     */
    public final TableField<SparkCtxInfoRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.gmt_create</code>. 创建时间
     */
    public final TableField<SparkCtxInfoRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.gmt_modified</code>. 修改时间
     */
    public final TableField<SparkCtxInfoRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.operator_id</code>. 操作人ID
     */
    public final TableField<SparkCtxInfoRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人ID");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.operator</code>. 操作人
     */
    public final TableField<SparkCtxInfoRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.del_status</code>. -1 ：表示删除
     */
    public final TableField<SparkCtxInfoRecord, Integer> DEL_STATUS = createField("del_status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "-1 ：表示删除");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.ctx_id</code>. spark content instance id
     */
    public final TableField<SparkCtxInfoRecord, String> CTX_ID = createField("ctx_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "spark content instance id");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.host_name</code>. 启动机器名称（IP）
     */
    public final TableField<SparkCtxInfoRecord, String> HOST_NAME = createField("host_name", org.jooq.impl.SQLDataType.VARCHAR(62).nullable(false), this, "启动机器名称（IP）");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.max_job_count</code>. 最大运行job数量
     */
    public final TableField<SparkCtxInfoRecord, Integer> MAX_JOB_COUNT = createField("max_job_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "最大运行job数量");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.status</code>. 状态：1：运行中，3：停止，5：停止，-1：禁用
     */
    public final TableField<SparkCtxInfoRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态：1：运行中，3：停止，5：停止，-1：禁用");

    /**
     * The column <code>SMETA_APP.spark_ctx_info.jar_name</code>. jar 名称

     */
    public final TableField<SparkCtxInfoRecord, String> JAR_NAME = createField("jar_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "jar 名称\n");

    /**
     * Create a <code>SMETA_APP.spark_ctx_info</code> table reference
     */
    public SparkCtxInfo() {
        this(DSL.name("spark_ctx_info"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.spark_ctx_info</code> table reference
     */
    public SparkCtxInfo(String alias) {
        this(DSL.name(alias), SPARK_CTX_INFO);
    }

    /**
     * Create an aliased <code>SMETA_APP.spark_ctx_info</code> table reference
     */
    public SparkCtxInfo(Name alias) {
        this(alias, SPARK_CTX_INFO);
    }

    private SparkCtxInfo(Name alias, Table<SparkCtxInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private SparkCtxInfo(Name alias, Table<SparkCtxInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "spark context 信息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPARK_CTX_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SparkCtxInfoRecord, ULong> getIdentity() {
        return Keys.IDENTITY_SPARK_CTX_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SparkCtxInfoRecord> getPrimaryKey() {
        return Keys.KEY_SPARK_CTX_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SparkCtxInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<SparkCtxInfoRecord>>asList(Keys.KEY_SPARK_CTX_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SparkCtxInfo as(String alias) {
        return new SparkCtxInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SparkCtxInfo as(Name alias) {
        return new SparkCtxInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SparkCtxInfo rename(String name) {
        return new SparkCtxInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SparkCtxInfo rename(Name name) {
        return new SparkCtxInfo(name, null);
    }
}
