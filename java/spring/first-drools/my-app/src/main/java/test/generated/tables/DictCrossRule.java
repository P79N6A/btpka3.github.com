/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictCrossRuleRecord;


/**
 * 字典规则血缘关系
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictCrossRule extends TableImpl<DictCrossRuleRecord> {

    private static final long serialVersionUID = -1945737508;

    /**
     * The reference instance of <code>SMETA_APP.dict_cross_rule</code>
     */
    public static final DictCrossRule DICT_CROSS_RULE = new DictCrossRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictCrossRuleRecord> getRecordType() {
        return DictCrossRuleRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_cross_rule.id</code>. 主键
     */
    public final TableField<DictCrossRuleRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_cross_rule.gmt_create</code>. 创建时间
     */
    public final TableField<DictCrossRuleRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_cross_rule.gmt_modified</code>. 修改时间
     */
    public final TableField<DictCrossRuleRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_cross_rule.event_code</code>. 事件code
     */
    public final TableField<DictCrossRuleRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "事件code");

    /**
     * The column <code>SMETA_APP.dict_cross_rule.event_column_code</code>. 事件属性code
     */
    public final TableField<DictCrossRuleRecord, String> EVENT_COLUMN_CODE = createField("event_column_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "事件属性code");

    /**
     * The column <code>SMETA_APP.dict_cross_rule.rule_id</code>. 规则id
     */
    public final TableField<DictCrossRuleRecord, String> RULE_ID = createField("rule_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "规则id");

    /**
     * Create a <code>SMETA_APP.dict_cross_rule</code> table reference
     */
    public DictCrossRule() {
        this(DSL.name("dict_cross_rule"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_cross_rule</code> table reference
     */
    public DictCrossRule(String alias) {
        this(DSL.name(alias), DICT_CROSS_RULE);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_cross_rule</code> table reference
     */
    public DictCrossRule(Name alias) {
        this(alias, DICT_CROSS_RULE);
    }

    private DictCrossRule(Name alias, Table<DictCrossRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictCrossRule(Name alias, Table<DictCrossRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "字典规则血缘关系");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_CROSS_RULE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictCrossRuleRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_CROSS_RULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictCrossRuleRecord> getPrimaryKey() {
        return Keys.KEY_DICT_CROSS_RULE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictCrossRuleRecord>> getKeys() {
        return Arrays.<UniqueKey<DictCrossRuleRecord>>asList(Keys.KEY_DICT_CROSS_RULE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictCrossRule as(String alias) {
        return new DictCrossRule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictCrossRule as(Name alias) {
        return new DictCrossRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictCrossRule rename(String name) {
        return new DictCrossRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictCrossRule rename(Name name) {
        return new DictCrossRule(name, null);
    }
}
