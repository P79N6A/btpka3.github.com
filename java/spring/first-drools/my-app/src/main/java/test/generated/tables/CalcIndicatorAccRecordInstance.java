/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcIndicatorAccRecordInstanceRecord;


/**
 * 时间取数运行实例
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcIndicatorAccRecordInstance extends TableImpl<CalcIndicatorAccRecordInstanceRecord> {

    private static final long serialVersionUID = -2073546084;

    /**
     * The reference instance of <code>SMETA_APP.calc_indicator_acc_record_instance</code>
     */
    public static final CalcIndicatorAccRecordInstance CALC_INDICATOR_ACC_RECORD_INSTANCE = new CalcIndicatorAccRecordInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcIndicatorAccRecordInstanceRecord> getRecordType() {
        return CalcIndicatorAccRecordInstanceRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.id</code>. 主键
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.gmt_start</code>. 运行开始时间
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, Timestamp> GMT_START = createField("gmt_start", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "运行开始时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.gmt_end</code>. 运行结束时间
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, Timestamp> GMT_END = createField("gmt_end", org.jooq.impl.SQLDataType.TIMESTAMP, this, "运行结束时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.operator</code>. 操作人
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.operator_id</code>. 操作人工号
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人工号");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.access_start_time</code>. 取数开始时间，格式：2015-12-23
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> ACCESS_START_TIME = createField("access_start_time", org.jooq.impl.SQLDataType.VARCHAR(32), this, "取数开始时间，格式：2015-12-23");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.access_end_time</code>. 取数结束时间，格式：2015-12-23
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> ACCESS_END_TIME = createField("access_end_time", org.jooq.impl.SQLDataType.VARCHAR(32), this, "取数结束时间，格式：2015-12-23");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.run_sql</code>. 取数运行模板
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> RUN_SQL = createField("run_sql", org.jooq.impl.SQLDataType.CLOB, this, "取数运行模板");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.record_id</code>. acc_record关联ID
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, ULong> RECORD_ID = createField("record_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "acc_record关联ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.status</code>. 状态：0: 指标准备，1：运行中，2：成功，3：失败，4：数据预处理, 5: 终止
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "状态：0: 指标准备，1：运行中，2：成功，3：失败，4：数据预处理, 5: 终止");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.template</code>. 模板详细信息，json格式
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> TEMPLATE = createField("template", org.jooq.impl.SQLDataType.CLOB, this, "模板详细信息，json格式");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.odps_node_id</code>. odps 节点ID
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> ODPS_NODE_ID = createField("odps_node_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "odps 节点ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.odps_task_id</code>. odps 运行任务ID
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> ODPS_TASK_ID = createField("odps_task_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "odps 运行任务ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.odps_pre_node_id</code>. odps 准备数据任务ID
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> ODPS_PRE_NODE_ID = createField("odps_pre_node_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "odps 准备数据任务ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.odps_pre_task_id</code>. odps准备数据阶段node id
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> ODPS_PRE_TASK_ID = createField("odps_pre_task_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "odps准备数据阶段node id");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.failure_msg</code>. 实例运行失败原因
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> FAILURE_MSG = createField("failure_msg", org.jooq.impl.SQLDataType.CLOB, this, "实例运行失败原因");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.indi_run_task_ids</code>. 指标运行taskId
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> INDI_RUN_TASK_IDS = createField("indi_run_task_ids", org.jooq.impl.SQLDataType.CLOB, this, "指标运行taskId");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.last_status</code>. 实例上一运行节点
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, Integer> LAST_STATUS = createField("last_status", org.jooq.impl.SQLDataType.INTEGER, this, "实例上一运行节点");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.calc_mode</code>. 计算方式：odps，spark
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> CALC_MODE = createField("calc_mode", org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.inline("odps", org.jooq.impl.SQLDataType.VARCHAR)), this, "计算方式：odps，spark");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.spark_jobid</code>. spark jobId
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> SPARK_JOBID = createField("spark_jobid", org.jooq.impl.SQLDataType.VARCHAR(16), this, "spark jobId");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.need_batch_join</code>. 是否需要分批JOIN。0：不用分批join，1：需要分批join
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, Integer> NEED_BATCH_JOIN = createField("need_batch_join", org.jooq.impl.SQLDataType.INTEGER, this, "是否需要分批JOIN。0：不用分批join，1：需要分批join");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_instance.join_run_task_info</code>. 分批join任务信息（json格式）
     */
    public final TableField<CalcIndicatorAccRecordInstanceRecord, String> JOIN_RUN_TASK_INFO = createField("join_run_task_info", org.jooq.impl.SQLDataType.CLOB, this, "分批join任务信息（json格式）");

    /**
     * Create a <code>SMETA_APP.calc_indicator_acc_record_instance</code> table reference
     */
    public CalcIndicatorAccRecordInstance() {
        this(DSL.name("calc_indicator_acc_record_instance"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_acc_record_instance</code> table reference
     */
    public CalcIndicatorAccRecordInstance(String alias) {
        this(DSL.name(alias), CALC_INDICATOR_ACC_RECORD_INSTANCE);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_acc_record_instance</code> table reference
     */
    public CalcIndicatorAccRecordInstance(Name alias) {
        this(alias, CALC_INDICATOR_ACC_RECORD_INSTANCE);
    }

    private CalcIndicatorAccRecordInstance(Name alias, Table<CalcIndicatorAccRecordInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcIndicatorAccRecordInstance(Name alias, Table<CalcIndicatorAccRecordInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "时间取数运行实例");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_INDICATOR_ACC_RECORD_INSTANCE_IDX_RECORDID_GMTSTART, Indexes.CALC_INDICATOR_ACC_RECORD_INSTANCE_IDX_RECORDID_GMTSTART_LASTSTATUS, Indexes.CALC_INDICATOR_ACC_RECORD_INSTANCE_IDX_RECORDID_GMTSTART_STATUS, Indexes.CALC_INDICATOR_ACC_RECORD_INSTANCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcIndicatorAccRecordInstanceRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_INDICATOR_ACC_RECORD_INSTANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcIndicatorAccRecordInstanceRecord> getPrimaryKey() {
        return Keys.KEY_CALC_INDICATOR_ACC_RECORD_INSTANCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcIndicatorAccRecordInstanceRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcIndicatorAccRecordInstanceRecord>>asList(Keys.KEY_CALC_INDICATOR_ACC_RECORD_INSTANCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorAccRecordInstance as(String alias) {
        return new CalcIndicatorAccRecordInstance(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorAccRecordInstance as(Name alias) {
        return new CalcIndicatorAccRecordInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorAccRecordInstance rename(String name) {
        return new CalcIndicatorAccRecordInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorAccRecordInstance rename(Name name) {
        return new CalcIndicatorAccRecordInstance(name, null);
    }
}
