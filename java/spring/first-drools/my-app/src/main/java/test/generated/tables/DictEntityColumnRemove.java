/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictEntityColumnRemoveRecord;


/**
 * 实体二次调用属性清理
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictEntityColumnRemove extends TableImpl<DictEntityColumnRemoveRecord> {

    private static final long serialVersionUID = -1071084160;

    /**
     * The reference instance of <code>SMETA_APP.dict_entity_column_remove</code>
     */
    public static final DictEntityColumnRemove DICT_ENTITY_COLUMN_REMOVE = new DictEntityColumnRemove();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictEntityColumnRemoveRecord> getRecordType() {
        return DictEntityColumnRemoveRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.id</code>. 主键
     */
    public final TableField<DictEntityColumnRemoveRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.clear_rank</code>. 清理排序
     */
    public final TableField<DictEntityColumnRemoveRecord, Long> CLEAR_RANK = createField("clear_rank", org.jooq.impl.SQLDataType.BIGINT, this, "清理排序");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.event_code</code>. 事件编码
     */
    public final TableField<DictEntityColumnRemoveRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "事件编码");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.entity_code</code>. 实体编码
     */
    public final TableField<DictEntityColumnRemoveRecord, String> ENTITY_CODE = createField("entity_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "实体编码");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.entity_script</code>. 实体脚本
     */
    public final TableField<DictEntityColumnRemoveRecord, String> ENTITY_SCRIPT = createField("entity_script", org.jooq.impl.SQLDataType.CLOB, this, "实体脚本");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.column_code</code>. 属性编码
     */
    public final TableField<DictEntityColumnRemoveRecord, String> COLUMN_CODE = createField("column_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "属性编码");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.column_script</code>. 属性脚本
     */
    public final TableField<DictEntityColumnRemoveRecord, String> COLUMN_SCRIPT = createField("column_script", org.jooq.impl.SQLDataType.CLOB, this, "属性脚本");

    /**
     * The column <code>SMETA_APP.dict_entity_column_remove.tag_code</code>. 标识位：是否有下游，1有下游，0无下游
     */
    public final TableField<DictEntityColumnRemoveRecord, String> TAG_CODE = createField("tag_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "标识位：是否有下游，1有下游，0无下游");

    /**
     * Create a <code>SMETA_APP.dict_entity_column_remove</code> table reference
     */
    public DictEntityColumnRemove() {
        this(DSL.name("dict_entity_column_remove"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_entity_column_remove</code> table reference
     */
    public DictEntityColumnRemove(String alias) {
        this(DSL.name(alias), DICT_ENTITY_COLUMN_REMOVE);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_entity_column_remove</code> table reference
     */
    public DictEntityColumnRemove(Name alias) {
        this(alias, DICT_ENTITY_COLUMN_REMOVE);
    }

    private DictEntityColumnRemove(Name alias, Table<DictEntityColumnRemoveRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictEntityColumnRemove(Name alias, Table<DictEntityColumnRemoveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "实体二次调用属性清理");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_ENTITY_COLUMN_REMOVE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictEntityColumnRemoveRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_ENTITY_COLUMN_REMOVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictEntityColumnRemoveRecord> getPrimaryKey() {
        return Keys.KEY_DICT_ENTITY_COLUMN_REMOVE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictEntityColumnRemoveRecord>> getKeys() {
        return Arrays.<UniqueKey<DictEntityColumnRemoveRecord>>asList(Keys.KEY_DICT_ENTITY_COLUMN_REMOVE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEntityColumnRemove as(String alias) {
        return new DictEntityColumnRemove(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEntityColumnRemove as(Name alias) {
        return new DictEntityColumnRemove(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEntityColumnRemove rename(String name) {
        return new DictEntityColumnRemove(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEntityColumnRemove rename(Name name) {
        return new DictEntityColumnRemove(name, null);
    }
}
