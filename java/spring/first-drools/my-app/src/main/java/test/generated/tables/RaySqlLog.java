/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.RaySqlLogRecord;


/**
 * 整个sql框页面
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaySqlLog extends TableImpl<RaySqlLogRecord> {

    private static final long serialVersionUID = -666676146;

    /**
     * The reference instance of <code>SMETA_APP.ray_sql_log</code>
     */
    public static final RaySqlLog RAY_SQL_LOG = new RaySqlLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaySqlLogRecord> getRecordType() {
        return RaySqlLogRecord.class;
    }

    /**
     * The column <code>SMETA_APP.ray_sql_log.id</code>. 主键
     */
    public final TableField<RaySqlLogRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.ray_sql_log.gmt_create</code>. 创建时间
     */
    public final TableField<RaySqlLogRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.ray_sql_log.gmt_modified</code>. 修改时间
     */
    public final TableField<RaySqlLogRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.ray_sql_log.biz_id</code>. 创建者工号
     */
    public final TableField<RaySqlLogRecord, String> BIZ_ID = createField("biz_id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "创建者工号");

    /**
     * The column <code>SMETA_APP.ray_sql_log.tenant_code</code>. 租户id
     */
    public final TableField<RaySqlLogRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "租户id");

    /**
     * The column <code>SMETA_APP.ray_sql_log.preheat_job_id</code>. 预热id，外键
     */
    public final TableField<RaySqlLogRecord, ULong> PREHEAT_JOB_ID = createField("preheat_job_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "预热id，外键");

    /**
     * Create a <code>SMETA_APP.ray_sql_log</code> table reference
     */
    public RaySqlLog() {
        this(DSL.name("ray_sql_log"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_sql_log</code> table reference
     */
    public RaySqlLog(String alias) {
        this(DSL.name(alias), RAY_SQL_LOG);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_sql_log</code> table reference
     */
    public RaySqlLog(Name alias) {
        this(alias, RAY_SQL_LOG);
    }

    private RaySqlLog(Name alias, Table<RaySqlLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaySqlLog(Name alias, Table<RaySqlLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "整个sql框页面");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RAY_SQL_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RaySqlLogRecord, ULong> getIdentity() {
        return Keys.IDENTITY_RAY_SQL_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RaySqlLogRecord> getPrimaryKey() {
        return Keys.KEY_RAY_SQL_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RaySqlLogRecord>> getKeys() {
        return Arrays.<UniqueKey<RaySqlLogRecord>>asList(Keys.KEY_RAY_SQL_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RaySqlLog as(String alias) {
        return new RaySqlLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RaySqlLog as(Name alias) {
        return new RaySqlLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaySqlLog rename(String name) {
        return new RaySqlLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaySqlLog rename(Name name) {
        return new RaySqlLog(name, null);
    }
}
