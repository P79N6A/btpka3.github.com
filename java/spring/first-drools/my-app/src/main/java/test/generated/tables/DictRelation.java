/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictRelationRecord;


/**
 * 数据字典下游血缘关系
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictRelation extends TableImpl<DictRelationRecord> {

    private static final long serialVersionUID = -163869028;

    /**
     * The reference instance of <code>SMETA_APP.dict_relation</code>
     */
    public static final DictRelation DICT_RELATION = new DictRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictRelationRecord> getRecordType() {
        return DictRelationRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_relation.id</code>. 主键
     */
    public final TableField<DictRelationRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_relation.gmt_create</code>. 创建时间
     */
    public final TableField<DictRelationRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_relation.gmt_modified</code>. 修改时间
     */
    public final TableField<DictRelationRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_relation.event_code</code>. 事件code
     */
    public final TableField<DictRelationRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件code");

    /**
     * The column <code>SMETA_APP.dict_relation.event_column_code</code>. 事件字段code
     */
    public final TableField<DictRelationRecord, String> EVENT_COLUMN_CODE = createField("event_column_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "事件字段code");

    /**
     * The column <code>SMETA_APP.dict_relation.re_event_code</code>. 下游事件code，可能是事件code、表名
     */
    public final TableField<DictRelationRecord, String> RE_EVENT_CODE = createField("re_event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "下游事件code，可能是事件code、表名");

    /**
     * The column <code>SMETA_APP.dict_relation.re_column_code</code>. 下游事件字段code
     */
    public final TableField<DictRelationRecord, String> RE_COLUMN_CODE = createField("re_column_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "下游事件字段code");

    /**
     * The column <code>SMETA_APP.dict_relation.type</code>. 血缘类型，event：事件的血缘，column：属性的血缘
     */
    public final TableField<DictRelationRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "血缘类型，event：事件的血缘，column：属性的血缘");

    /**
     * The column <code>SMETA_APP.dict_relation.source</code>. 血缘来源，mtee，odps，way，nut
     */
    public final TableField<DictRelationRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "血缘来源，mtee，odps，way，nut");

    /**
     * The column <code>SMETA_APP.dict_relation.object_name</code>. 下游对象名称，可能是规则id、表名、指标code等
     */
    public final TableField<DictRelationRecord, String> OBJECT_NAME = createField("object_name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "下游对象名称，可能是规则id、表名、指标code等");

    /**
     * The column <code>SMETA_APP.dict_relation.stat_data</code>. 统计分析的数据，json格式
     */
    public final TableField<DictRelationRecord, String> STAT_DATA = createField("stat_data", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "统计分析的数据，json格式");

    /**
     * The column <code>SMETA_APP.dict_relation.object_cn_name</code>. object_cn_name
     */
    public final TableField<DictRelationRecord, String> OBJECT_CN_NAME = createField("object_cn_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "object_cn_name");

    /**
     * The column <code>SMETA_APP.dict_relation.owner</code>. 负责人
     */
    public final TableField<DictRelationRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(256), this, "负责人");

    /**
     * Create a <code>SMETA_APP.dict_relation</code> table reference
     */
    public DictRelation() {
        this(DSL.name("dict_relation"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_relation</code> table reference
     */
    public DictRelation(String alias) {
        this(DSL.name(alias), DICT_RELATION);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_relation</code> table reference
     */
    public DictRelation(Name alias) {
        this(alias, DICT_RELATION);
    }

    private DictRelation(Name alias, Table<DictRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictRelation(Name alias, Table<DictRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "数据字典下游血缘关系");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_RELATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictRelationRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_RELATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictRelationRecord> getPrimaryKey() {
        return Keys.KEY_DICT_RELATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<DictRelationRecord>>asList(Keys.KEY_DICT_RELATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictRelation as(String alias) {
        return new DictRelation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictRelation as(Name alias) {
        return new DictRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictRelation rename(String name) {
        return new DictRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictRelation rename(Name name) {
        return new DictRelation(name, null);
    }
}
