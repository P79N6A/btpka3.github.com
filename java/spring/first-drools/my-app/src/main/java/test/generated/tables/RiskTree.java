/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.RiskTreeRecord;


/**
 * 标签树表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RiskTree extends TableImpl<RiskTreeRecord> {

    private static final long serialVersionUID = 382199756;

    /**
     * The reference instance of <code>SMETA_APP.risk_tree</code>
     */
    public static final RiskTree RISK_TREE = new RiskTree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RiskTreeRecord> getRecordType() {
        return RiskTreeRecord.class;
    }

    /**
     * The column <code>SMETA_APP.risk_tree.id</code>. 主键
     */
    public final TableField<RiskTreeRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.risk_tree.gmt_create</code>. 创建时间
     */
    public final TableField<RiskTreeRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.risk_tree.gmt_modified</code>. 修改时间
     */
    public final TableField<RiskTreeRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.risk_tree.tree_name</code>. 树中文名称
     */
    public final TableField<RiskTreeRecord, String> TREE_NAME = createField("tree_name", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "树中文名称");

    /**
     * The column <code>SMETA_APP.risk_tree.tree_type</code>. 树类型
     */
    public final TableField<RiskTreeRecord, String> TREE_TYPE = createField("tree_type", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "树类型");

    /**
     * The column <code>SMETA_APP.risk_tree.status</code>. 状态，1-有效，0-废弃
     */
    public final TableField<RiskTreeRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态，1-有效，0-废弃");

    /**
     * The column <code>SMETA_APP.risk_tree.operator_id</code>. 操作人id
     */
    public final TableField<RiskTreeRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "操作人id");

    /**
     * The column <code>SMETA_APP.risk_tree.operator</code>. 操作人
     */
    public final TableField<RiskTreeRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.risk_tree.tenant_code</code>. 租户code
     */
    public final TableField<RiskTreeRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "租户code");

    /**
     * Create a <code>SMETA_APP.risk_tree</code> table reference
     */
    public RiskTree() {
        this(DSL.name("risk_tree"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.risk_tree</code> table reference
     */
    public RiskTree(String alias) {
        this(DSL.name(alias), RISK_TREE);
    }

    /**
     * Create an aliased <code>SMETA_APP.risk_tree</code> table reference
     */
    public RiskTree(Name alias) {
        this(alias, RISK_TREE);
    }

    private RiskTree(Name alias, Table<RiskTreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RiskTree(Name alias, Table<RiskTreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "标签树表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RISK_TREE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RiskTreeRecord, ULong> getIdentity() {
        return Keys.IDENTITY_RISK_TREE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RiskTreeRecord> getPrimaryKey() {
        return Keys.KEY_RISK_TREE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RiskTreeRecord>> getKeys() {
        return Arrays.<UniqueKey<RiskTreeRecord>>asList(Keys.KEY_RISK_TREE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RiskTree as(String alias) {
        return new RiskTree(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RiskTree as(Name alias) {
        return new RiskTree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RiskTree rename(String name) {
        return new RiskTree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RiskTree rename(Name name) {
        return new RiskTree(name, null);
    }
}
