/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcIndicatorAccRecordColumnRecord;


/**
 * 关联表字段信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcIndicatorAccRecordColumn extends TableImpl<CalcIndicatorAccRecordColumnRecord> {

    private static final long serialVersionUID = 183804172;

    /**
     * The reference instance of <code>SMETA_APP.calc_indicator_acc_record_column</code>
     */
    public static final CalcIndicatorAccRecordColumn CALC_INDICATOR_ACC_RECORD_COLUMN = new CalcIndicatorAccRecordColumn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcIndicatorAccRecordColumnRecord> getRecordType() {
        return CalcIndicatorAccRecordColumnRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.id</code>. 主键
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.gmt_create</code>. 创建时间
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.gmt_modified</code>. 修改时间
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.column_name</code>. 字段名称
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> COLUMN_NAME = createField("column_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "字段名称");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.column_type</code>. 字段类型
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> COLUMN_TYPE = createField("column_type", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "字段类型");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.column_desc</code>. 字段描述
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> COLUMN_DESC = createField("column_desc", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "字段描述");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.is_primary_key</code>. 0：非主键，1：主键
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, Integer> IS_PRIMARY_KEY = createField("is_primary_key", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "0：非主键，1：主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.table_id</code>. table 表ID
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, ULong> TABLE_ID = createField("table_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "table 表ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.record_id</code>. acc_record关联ID
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, ULong> RECORD_ID = createField("record_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "acc_record关联ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.security_level</code>. 安全等级
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> SECURITY_LEVEL = createField("security_level", org.jooq.impl.SQLDataType.VARCHAR(16), this, "安全等级");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.table_name</code>. 表名称
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "表名称");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.fk_column_id</code>. 关联外键ID
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, ULong> FK_COLUMN_ID = createField("fk_column_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "关联外键ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.column_script</code>. 实时取数脚本
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> COLUMN_SCRIPT = createField("column_script", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "实时取数脚本");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.column_script_off</code>. 离线取数脚本
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> COLUMN_SCRIPT_OFF = createField("column_script_off", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "离线取数脚本");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.completion_level</code>. 字段补全等级：1 上云全量补全；2 离线补全 join：离线指标，实体，名单；3 模拟计算：实时指标，离线函数脚本；4 在线补全：调vbs再补全。
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, Integer> COMPLETION_LEVEL = createField("completion_level", org.jooq.impl.SQLDataType.INTEGER, this, "字段补全等级：1 上云全量补全；2 离线补全 join：离线指标，实体，名单；3 模拟计算：实时指标，离线函数脚本；4 在线补全：调vbs再补全。");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.offline_table</code>. 实体对应离线表
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> OFFLINE_TABLE = createField("offline_table", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体对应离线表");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.offline_table_column</code>. 实体对应离线表字段
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> OFFLINE_TABLE_COLUMN = createField("offline_table_column", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体对应离线表字段");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.offline_table_pk</code>. 实体对应离线表主键
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> OFFLINE_TABLE_PK = createField("offline_table_pk", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体对应离线表主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record_column.event_table_pk</code>. 补全实体入参，事件表字段
     */
    public final TableField<CalcIndicatorAccRecordColumnRecord, String> EVENT_TABLE_PK = createField("event_table_pk", org.jooq.impl.SQLDataType.VARCHAR(128), this, "补全实体入参，事件表字段");

    /**
     * Create a <code>SMETA_APP.calc_indicator_acc_record_column</code> table reference
     */
    public CalcIndicatorAccRecordColumn() {
        this(DSL.name("calc_indicator_acc_record_column"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_acc_record_column</code> table reference
     */
    public CalcIndicatorAccRecordColumn(String alias) {
        this(DSL.name(alias), CALC_INDICATOR_ACC_RECORD_COLUMN);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_acc_record_column</code> table reference
     */
    public CalcIndicatorAccRecordColumn(Name alias) {
        this(alias, CALC_INDICATOR_ACC_RECORD_COLUMN);
    }

    private CalcIndicatorAccRecordColumn(Name alias, Table<CalcIndicatorAccRecordColumnRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcIndicatorAccRecordColumn(Name alias, Table<CalcIndicatorAccRecordColumnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "关联表字段信息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_INDICATOR_ACC_RECORD_COLUMN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcIndicatorAccRecordColumnRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_INDICATOR_ACC_RECORD_COLUMN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcIndicatorAccRecordColumnRecord> getPrimaryKey() {
        return Keys.KEY_CALC_INDICATOR_ACC_RECORD_COLUMN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcIndicatorAccRecordColumnRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcIndicatorAccRecordColumnRecord>>asList(Keys.KEY_CALC_INDICATOR_ACC_RECORD_COLUMN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorAccRecordColumn as(String alias) {
        return new CalcIndicatorAccRecordColumn(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorAccRecordColumn as(Name alias) {
        return new CalcIndicatorAccRecordColumn(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorAccRecordColumn rename(String name) {
        return new CalcIndicatorAccRecordColumn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorAccRecordColumn rename(Name name) {
        return new CalcIndicatorAccRecordColumn(name, null);
    }
}
