/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcSparkContextRecord;


/**
 * spark context
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcSparkContext extends TableImpl<CalcSparkContextRecord> {

    private static final long serialVersionUID = 510879661;

    /**
     * The reference instance of <code>SMETA_APP.calc_spark_context</code>
     */
    public static final CalcSparkContext CALC_SPARK_CONTEXT = new CalcSparkContext();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcSparkContextRecord> getRecordType() {
        return CalcSparkContextRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_spark_context.id</code>. 主键
     */
    public final TableField<CalcSparkContextRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_spark_context.gmt_create</code>. 创建时间
     */
    public final TableField<CalcSparkContextRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.calc_spark_context.gmt_modified</code>. 修改时间
     */
    public final TableField<CalcSparkContextRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.calc_spark_context.operator_id</code>. 操作人ID
     */
    public final TableField<CalcSparkContextRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人ID");

    /**
     * The column <code>SMETA_APP.calc_spark_context.operator</code>. operator
     */
    public final TableField<CalcSparkContextRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "operator");

    /**
     * The column <code>SMETA_APP.calc_spark_context.status</code>. 状态：1：运行中，3：启动中，5：停止，10: 失败，-1：待启动，-3：待停止
     */
    public final TableField<CalcSparkContextRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态：1：运行中，3：启动中，5：停止，10: 失败，-1：待启动，-3：待停止");

    /**
     * The column <code>SMETA_APP.calc_spark_context.del_status</code>. -1 ：表示删除
     */
    public final TableField<CalcSparkContextRecord, Integer> DEL_STATUS = createField("del_status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "-1 ：表示删除");

    /**
     * The column <code>SMETA_APP.calc_spark_context.host_name</code>. 机器hostname
     */
    public final TableField<CalcSparkContextRecord, String> HOST_NAME = createField("host_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "机器hostname");

    /**
     * The column <code>SMETA_APP.calc_spark_context.max_job_count</code>. 最大运行job数量
     */
    public final TableField<CalcSparkContextRecord, Integer> MAX_JOB_COUNT = createField("max_job_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "最大运行job数量");

    /**
     * The column <code>SMETA_APP.calc_spark_context.auto_start</code>. 是否自动启动
     */
    public final TableField<CalcSparkContextRecord, String> AUTO_START = createField("auto_start", org.jooq.impl.SQLDataType.VARCHAR(16), this, "是否自动启动");

    /**
     * The column <code>SMETA_APP.calc_spark_context.config</code>. spark context 参数配置
     */
    public final TableField<CalcSparkContextRecord, String> CONFIG = createField("config", org.jooq.impl.SQLDataType.CLOB, this, "spark context 参数配置");

    /**
     * The column <code>SMETA_APP.calc_spark_context.driver_jar_name</code>. driver_jar_name
     */
    public final TableField<CalcSparkContextRecord, String> DRIVER_JAR_NAME = createField("driver_jar_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "driver_jar_name");

    /**
     * The column <code>SMETA_APP.calc_spark_context.ctx_id</code>. spark content instance id
     */
    public final TableField<CalcSparkContextRecord, String> CTX_ID = createField("ctx_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "spark content instance id");

    /**
     * The column <code>SMETA_APP.calc_spark_context.jar_name</code>. spark submit 提交jar返回jar name
     */
    public final TableField<CalcSparkContextRecord, String> JAR_NAME = createField("jar_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "spark submit 提交jar返回jar name");

    /**
     * The column <code>SMETA_APP.calc_spark_context.cupid_track_url</code>. spark ui
     */
    public final TableField<CalcSparkContextRecord, String> CUPID_TRACK_URL = createField("cupid_track_url", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "spark ui");

    /**
     * The column <code>SMETA_APP.calc_spark_context.exception</code>. 异常信息
     */
    public final TableField<CalcSparkContextRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.CLOB, this, "异常信息");

    /**
     * The column <code>SMETA_APP.calc_spark_context.is_test</code>. 是否测试
     */
    public final TableField<CalcSparkContextRecord, String> IS_TEST = createField("is_test", org.jooq.impl.SQLDataType.VARCHAR(16), this, "是否测试");

    /**
     * Create a <code>SMETA_APP.calc_spark_context</code> table reference
     */
    public CalcSparkContext() {
        this(DSL.name("calc_spark_context"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_spark_context</code> table reference
     */
    public CalcSparkContext(String alias) {
        this(DSL.name(alias), CALC_SPARK_CONTEXT);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_spark_context</code> table reference
     */
    public CalcSparkContext(Name alias) {
        this(alias, CALC_SPARK_CONTEXT);
    }

    private CalcSparkContext(Name alias, Table<CalcSparkContextRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcSparkContext(Name alias, Table<CalcSparkContextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "spark context");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_SPARK_CONTEXT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcSparkContextRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_SPARK_CONTEXT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcSparkContextRecord> getPrimaryKey() {
        return Keys.KEY_CALC_SPARK_CONTEXT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcSparkContextRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcSparkContextRecord>>asList(Keys.KEY_CALC_SPARK_CONTEXT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcSparkContext as(String alias) {
        return new CalcSparkContext(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcSparkContext as(Name alias) {
        return new CalcSparkContext(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcSparkContext rename(String name) {
        return new CalcSparkContext(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcSparkContext rename(Name name) {
        return new CalcSparkContext(name, null);
    }
}
