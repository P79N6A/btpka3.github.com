/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.RaySqlJobRecord;


/**
 * 一大段sql中一小段片段执行的日志
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RaySqlJob extends TableImpl<RaySqlJobRecord> {

    private static final long serialVersionUID = -528242231;

    /**
     * The reference instance of <code>SMETA_APP.ray_sql_job</code>
     */
    public static final RaySqlJob RAY_SQL_JOB = new RaySqlJob();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RaySqlJobRecord> getRecordType() {
        return RaySqlJobRecord.class;
    }

    /**
     * The column <code>SMETA_APP.ray_sql_job.id</code>. 主键
     */
    public final TableField<RaySqlJobRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.ray_sql_job.gmt_create</code>. 创建时间
     */
    public final TableField<RaySqlJobRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.ray_sql_job.gmt_modified</code>. 修改时间
     */
    public final TableField<RaySqlJobRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.ray_sql_job.biz_id</code>. 创建者工号
     */
    public final TableField<RaySqlJobRecord, String> BIZ_ID = createField("biz_id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "创建者工号");

    /**
     * The column <code>SMETA_APP.ray_sql_job.tenant_code</code>. 租户id
     */
    public final TableField<RaySqlJobRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "租户id");

    /**
     * The column <code>SMETA_APP.ray_sql_job.sql_log_id</code>. 外键
     */
    public final TableField<RaySqlJobRecord, ULong> SQL_LOG_ID = createField("sql_log_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "外键");

    /**
     * The column <code>SMETA_APP.ray_sql_job.sql_text</code>. sql文本
     */
    public final TableField<RaySqlJobRecord, String> SQL_TEXT = createField("sql_text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "sql文本");

    /**
     * The column <code>SMETA_APP.ray_sql_job.status</code>. 状态
     */
    public final TableField<RaySqlJobRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "状态");

    /**
     * The column <code>SMETA_APP.ray_sql_job.extra_info</code>. 额外信息
     */
    public final TableField<RaySqlJobRecord, String> EXTRA_INFO = createField("extra_info", org.jooq.impl.SQLDataType.CLOB, this, "额外信息");

    /**
     * The column <code>SMETA_APP.ray_sql_job.nick_name</code>. 花名
     */
    public final TableField<RaySqlJobRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "花名");

    /**
     * Create a <code>SMETA_APP.ray_sql_job</code> table reference
     */
    public RaySqlJob() {
        this(DSL.name("ray_sql_job"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_sql_job</code> table reference
     */
    public RaySqlJob(String alias) {
        this(DSL.name(alias), RAY_SQL_JOB);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_sql_job</code> table reference
     */
    public RaySqlJob(Name alias) {
        this(alias, RAY_SQL_JOB);
    }

    private RaySqlJob(Name alias, Table<RaySqlJobRecord> aliased) {
        this(alias, aliased, null);
    }

    private RaySqlJob(Name alias, Table<RaySqlJobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "一大段sql中一小段片段执行的日志");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RAY_SQL_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RaySqlJobRecord, ULong> getIdentity() {
        return Keys.IDENTITY_RAY_SQL_JOB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RaySqlJobRecord> getPrimaryKey() {
        return Keys.KEY_RAY_SQL_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RaySqlJobRecord>> getKeys() {
        return Arrays.<UniqueKey<RaySqlJobRecord>>asList(Keys.KEY_RAY_SQL_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RaySqlJob as(String alias) {
        return new RaySqlJob(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RaySqlJob as(Name alias) {
        return new RaySqlJob(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RaySqlJob rename(String name) {
        return new RaySqlJob(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RaySqlJob rename(Name name) {
        return new RaySqlJob(name, null);
    }
}
