/*
 * This file is generated by jOOQ.
*/
package test.generated.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.DictMappingEventColumns;


/**
 * mtee 事件迁移属性表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictMappingEventColumnsRecord extends UpdatableRecordImpl<DictMappingEventColumnsRecord> {

    private static final long serialVersionUID = 1608597365;

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.id</code>. 主键
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.id</code>. 主键
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.gmt_create</code>. 创建时间
     */
    public void setGmtCreate(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.gmt_create</code>. 创建时间
     */
    public Timestamp getGmtCreate() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.gmt_modified</code>. 修改时间
     */
    public void setGmtModified(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.gmt_modified</code>. 修改时间
     */
    public Timestamp getGmtModified() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.event_code</code>. 事件编码
     */
    public void setEventCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.event_code</code>. 事件编码
     */
    public String getEventCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.old_name</code>. 老路径
     */
    public void setOldName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.old_name</code>. 老路径
     */
    public String getOldName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.old_script</code>. 老脚本
     */
    public void setOldScript(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.old_script</code>. 老脚本
     */
    public String getOldScript() {
        return (String) get(5);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.old_data_type</code>. 老数据类型
     */
    public void setOldDataType(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.old_data_type</code>. 老数据类型
     */
    public String getOldDataType() {
        return (String) get(6);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.column_type</code>. 属性类型
     */
    public void setColumnType(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.column_type</code>. 属性类型
     */
    public Integer getColumnType() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.new_column_code</code>. 属性code
     */
    public void setNewColumnCode(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.new_column_code</code>. 属性code
     */
    public String getNewColumnCode() {
        return (String) get(8);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.new_column_script</code>. 新属性脚本
     */
    public void setNewColumnScript(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.new_column_script</code>. 新属性脚本
     */
    public String getNewColumnScript() {
        return (String) get(9);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.sample_data</code>. 样本值
     */
    public void setSampleData(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.sample_data</code>. 样本值
     */
    public String getSampleData() {
        return (String) get(10);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.match_level</code>. 匹配等级
     */
    public void setMatchLevel(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.match_level</code>. 匹配等级
     */
    public String getMatchLevel() {
        return (String) get(11);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.operator_id</code>. 操作人ID
     */
    public void setOperatorId(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.operator_id</code>. 操作人ID
     */
    public String getOperatorId() {
        return (String) get(12);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.operator</code>. 操作人
     */
    public void setOperator(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.operator</code>. 操作人
     */
    public String getOperator() {
        return (String) get(13);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.comment</code>. 备注
     */
    public void setComment(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.comment</code>. 备注
     */
    public String getComment() {
        return (String) get(14);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.new_entity_code</code>. 实体code
     */
    public void setNewEntityCode(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.new_entity_code</code>. 实体code
     */
    public String getNewEntityCode() {
        return (String) get(15);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.column_id</code>. 属性ID
     */
    public void setColumnId(Long value) {
        set(16, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.column_id</code>. 属性ID
     */
    public Long getColumnId() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.new_entity_script</code>. 新实体脚本
     */
    public void setNewEntityScript(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.new_entity_script</code>. 新实体脚本
     */
    public String getNewEntityScript() {
        return (String) get(17);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.empty_status</code>. 是否为空，1：是，0：否
     */
    public void setEmptyStatus(Integer value) {
        set(18, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.empty_status</code>. 是否为空，1：是，0：否
     */
    public Integer getEmptyStatus() {
        return (Integer) get(18);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.enum_status</code>. 是否可枚举，1：是，0：否
     */
    public void setEnumStatus(Integer value) {
        set(19, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.enum_status</code>. 是否可枚举，1：是，0：否
     */
    public Integer getEnumStatus() {
        return (Integer) get(19);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.enum_value</code>. 枚举值，key：value格式存储
     */
    public void setEnumValue(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.enum_value</code>. 枚举值，key：value格式存储
     */
    public String getEnumValue() {
        return (String) get(20);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.status</code>. -1: 删除，1：草稿、2：待审核、3：有效
     */
    public void setStatus(Integer value) {
        set(21, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.status</code>. -1: 删除，1：草稿、2：待审核、3：有效
     */
    public Integer getStatus() {
        return (Integer) get(21);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.creater</code>. 创建人
     */
    public void setCreater(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.creater</code>. 创建人
     */
    public String getCreater() {
        return (String) get(22);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.creater_id</code>. 创建人ID
     */
    public void setCreaterId(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.creater_id</code>. 创建人ID
     */
    public String getCreaterId() {
        return (String) get(23);
    }

    /**
     * Setter for <code>SMETA_APP.dict_mapping_event_columns.audit_comment</code>. 审核备注
     */
    public void setAuditComment(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>SMETA_APP.dict_mapping_event_columns.audit_comment</code>. 审核备注
     */
    public String getAuditComment() {
        return (String) get(24);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DictMappingEventColumnsRecord
     */
    public DictMappingEventColumnsRecord() {
        super(DictMappingEventColumns.DICT_MAPPING_EVENT_COLUMNS);
    }

    /**
     * Create a detached, initialised DictMappingEventColumnsRecord
     */
    public DictMappingEventColumnsRecord(Long id, Timestamp gmtCreate, Timestamp gmtModified, String eventCode, String oldName, String oldScript, String oldDataType, Integer columnType, String newColumnCode, String newColumnScript, String sampleData, String matchLevel, String operatorId, String operator, String comment, String newEntityCode, Long columnId, String newEntityScript, Integer emptyStatus, Integer enumStatus, String enumValue, Integer status, String creater, String createrId, String auditComment) {
        super(DictMappingEventColumns.DICT_MAPPING_EVENT_COLUMNS);

        set(0, id);
        set(1, gmtCreate);
        set(2, gmtModified);
        set(3, eventCode);
        set(4, oldName);
        set(5, oldScript);
        set(6, oldDataType);
        set(7, columnType);
        set(8, newColumnCode);
        set(9, newColumnScript);
        set(10, sampleData);
        set(11, matchLevel);
        set(12, operatorId);
        set(13, operator);
        set(14, comment);
        set(15, newEntityCode);
        set(16, columnId);
        set(17, newEntityScript);
        set(18, emptyStatus);
        set(19, enumStatus);
        set(20, enumValue);
        set(21, status);
        set(22, creater);
        set(23, createrId);
        set(24, auditComment);
    }
}
