/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.IndicatorProcessRecord;


/**
 * 指标流程实例关系表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorProcess extends TableImpl<IndicatorProcessRecord> {

    private static final long serialVersionUID = 1564030269;

    /**
     * The reference instance of <code>SMETA_APP.indicator_process</code>
     */
    public static final IndicatorProcess INDICATOR_PROCESS = new IndicatorProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorProcessRecord> getRecordType() {
        return IndicatorProcessRecord.class;
    }

    /**
     * The column <code>SMETA_APP.indicator_process.id</code>. 主键
     */
    public final TableField<IndicatorProcessRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.indicator_process.gmt_create</code>. 创建时间
     */
    public final TableField<IndicatorProcessRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.indicator_process.gmt_modified</code>. 修改时间
     */
    public final TableField<IndicatorProcessRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.indicator_process.key_code</code>. 业务编码
     */
    public final TableField<IndicatorProcessRecord, String> KEY_CODE = createField("key_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "业务编码");

    /**
     * The column <code>SMETA_APP.indicator_process.process_id</code>. 流程实例ID
     */
    public final TableField<IndicatorProcessRecord, String> PROCESS_ID = createField("process_id", org.jooq.impl.SQLDataType.VARCHAR(256), this, "流程实例ID");

    /**
     * The column <code>SMETA_APP.indicator_process.status</code>. 流程实例状态
     */
    public final TableField<IndicatorProcessRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(15), this, "流程实例状态");

    /**
     * The column <code>SMETA_APP.indicator_process.indicator_type</code>. 指标类型
     */
    public final TableField<IndicatorProcessRecord, String> INDICATOR_TYPE = createField("indicator_type", org.jooq.impl.SQLDataType.VARCHAR(12), this, "指标类型");

    /**
     * Create a <code>SMETA_APP.indicator_process</code> table reference
     */
    public IndicatorProcess() {
        this(DSL.name("indicator_process"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_process</code> table reference
     */
    public IndicatorProcess(String alias) {
        this(DSL.name(alias), INDICATOR_PROCESS);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_process</code> table reference
     */
    public IndicatorProcess(Name alias) {
        this(alias, INDICATOR_PROCESS);
    }

    private IndicatorProcess(Name alias, Table<IndicatorProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorProcess(Name alias, Table<IndicatorProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标流程实例关系表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDICATOR_PROCESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndicatorProcessRecord, ULong> getIdentity() {
        return Keys.IDENTITY_INDICATOR_PROCESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndicatorProcessRecord> getPrimaryKey() {
        return Keys.KEY_INDICATOR_PROCESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndicatorProcessRecord>> getKeys() {
        return Arrays.<UniqueKey<IndicatorProcessRecord>>asList(Keys.KEY_INDICATOR_PROCESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorProcess as(String alias) {
        return new IndicatorProcess(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorProcess as(Name alias) {
        return new IndicatorProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorProcess rename(String name) {
        return new IndicatorProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorProcess rename(Name name) {
        return new IndicatorProcess(name, null);
    }
}
