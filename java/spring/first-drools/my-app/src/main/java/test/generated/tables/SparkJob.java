/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.SparkJobRecord;


/**
 * spark job 信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SparkJob extends TableImpl<SparkJobRecord> {

    private static final long serialVersionUID = 1623125840;

    /**
     * The reference instance of <code>SMETA_APP.spark_job</code>
     */
    public static final SparkJob SPARK_JOB = new SparkJob();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SparkJobRecord> getRecordType() {
        return SparkJobRecord.class;
    }

    /**
     * The column <code>SMETA_APP.spark_job.id</code>. 主键
     */
    public final TableField<SparkJobRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.spark_job.gmt_create</code>. 创建时间
     */
    public final TableField<SparkJobRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.spark_job.gmt_modified</code>. 修改时间
     */
    public final TableField<SparkJobRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * The column <code>SMETA_APP.spark_job.operator_id</code>. 操作人ID
     */
    public final TableField<SparkJobRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人ID");

    /**
     * The column <code>SMETA_APP.spark_job.operator</code>. 操作人
     */
    public final TableField<SparkJobRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.spark_job.del_status</code>. -1 ：表示删除
     */
    public final TableField<SparkJobRecord, Integer> DEL_STATUS = createField("del_status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "-1 ：表示删除");

    /**
     * The column <code>SMETA_APP.spark_job.status</code>. 状态
     */
    public final TableField<SparkJobRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态");

    /**
     * The column <code>SMETA_APP.spark_job.content</code>. 任务内容
     */
    public final TableField<SparkJobRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "任务内容");

    /**
     * The column <code>SMETA_APP.spark_job.exception</code>. 异常信息
     */
    public final TableField<SparkJobRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.CLOB, this, "异常信息");

    /**
     * The column <code>SMETA_APP.spark_job.job_id</code>. jobid
     */
    public final TableField<SparkJobRecord, String> JOB_ID = createField("job_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "jobid");

    /**
     * The column <code>SMETA_APP.spark_job.job_name</code>. jobname
     */
    public final TableField<SparkJobRecord, String> JOB_NAME = createField("job_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "jobname");

    /**
     * The column <code>SMETA_APP.spark_job.ctx_id</code>. spark context instance id
     */
    public final TableField<SparkJobRecord, String> CTX_ID = createField("ctx_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "spark context instance id");

    /**
     * Create a <code>SMETA_APP.spark_job</code> table reference
     */
    public SparkJob() {
        this(DSL.name("spark_job"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.spark_job</code> table reference
     */
    public SparkJob(String alias) {
        this(DSL.name(alias), SPARK_JOB);
    }

    /**
     * Create an aliased <code>SMETA_APP.spark_job</code> table reference
     */
    public SparkJob(Name alias) {
        this(alias, SPARK_JOB);
    }

    private SparkJob(Name alias, Table<SparkJobRecord> aliased) {
        this(alias, aliased, null);
    }

    private SparkJob(Name alias, Table<SparkJobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "spark job 信息");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPARK_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SparkJobRecord, ULong> getIdentity() {
        return Keys.IDENTITY_SPARK_JOB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SparkJobRecord> getPrimaryKey() {
        return Keys.KEY_SPARK_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SparkJobRecord>> getKeys() {
        return Arrays.<UniqueKey<SparkJobRecord>>asList(Keys.KEY_SPARK_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SparkJob as(String alias) {
        return new SparkJob(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SparkJob as(Name alias) {
        return new SparkJob(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SparkJob rename(String name) {
        return new SparkJob(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SparkJob rename(Name name) {
        return new SparkJob(name, null);
    }
}
