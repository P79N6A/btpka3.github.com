/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcIndicatorAccRecordRecord;


/**
 * 事件指标取数定义
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcIndicatorAccRecord extends TableImpl<CalcIndicatorAccRecordRecord> {

    private static final long serialVersionUID = -505966088;

    /**
     * The reference instance of <code>SMETA_APP.calc_indicator_acc_record</code>
     */
    public static final CalcIndicatorAccRecord CALC_INDICATOR_ACC_RECORD = new CalcIndicatorAccRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcIndicatorAccRecordRecord> getRecordType() {
        return CalcIndicatorAccRecordRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.id</code>. 主键
     */
    public final TableField<CalcIndicatorAccRecordRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.gmt_create</code>. 创建时间
     */
    public final TableField<CalcIndicatorAccRecordRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.gmt_modified</code>. 修改时间
     */
    public final TableField<CalcIndicatorAccRecordRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.operator</code>. 操作人
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.operator_id</code>. 操作人工号
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "操作人工号");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.creator</code>. 创建人
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> CREATOR = createField("creator", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "创建人");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.creator_id</code>. 创建人工号
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "创建人工号");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.name</code>. 名称
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "名称");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.data_type</code>. 数据分类（1：规则实验计算，2：特征预热计算，3：特征周期计算，99：其他）
     */
    public final TableField<CalcIndicatorAccRecordRecord, Integer> DATA_TYPE = createField("data_type", org.jooq.impl.SQLDataType.INTEGER, this, "数据分类（1：规则实验计算，2：特征预热计算，3：特征周期计算，99：其他）");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.comment</code>. 备注
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "备注");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.submitter</code>. 审核提交人员
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> SUBMITTER = createField("submitter", org.jooq.impl.SQLDataType.VARCHAR(32), this, "审核提交人员");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.status</code>. 状态（1：草稿，2：审核，3：有效，4：数据准备，5：运行）
     */
    public final TableField<CalcIndicatorAccRecordRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "状态（1：草稿，2：审核，3：有效，4：数据准备，5：运行）");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.result_table_name</code>. 输出结果表明
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> RESULT_TABLE_NAME = createField("result_table_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "输出结果表明");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.code</code>. 取数编码
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "取数编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.odps_pre_node_id</code>. odps准备数据阶段node id
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> ODPS_PRE_NODE_ID = createField("odps_pre_node_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "odps准备数据阶段node id");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.odps_node_id</code>. odps运行阶段node id
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> ODPS_NODE_ID = createField("odps_node_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "odps运行阶段node id");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.run_step</code>. 运行步骤 1: 预处理数据, 2: 指标准备阶段, 3: 最终运行阶段(数据结果数据)
     */
    public final TableField<CalcIndicatorAccRecordRecord, Integer> RUN_STEP = createField("run_step", org.jooq.impl.SQLDataType.INTEGER, this, "运行步骤 1: 预处理数据, 2: 指标准备阶段, 3: 最终运行阶段(数据结果数据)");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.scene_id</code>. 指标中心场景ID
     */
    public final TableField<CalcIndicatorAccRecordRecord, ULong> SCENE_ID = createField("scene_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "指标中心场景ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.old_record_id</code>. 上一次可复用取数定义ID
     */
    public final TableField<CalcIndicatorAccRecordRecord, ULong> OLD_RECORD_ID = createField("old_record_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "上一次可复用取数定义ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.old_scene_id</code>. 上一次可复用指标计算ID
     */
    public final TableField<CalcIndicatorAccRecordRecord, ULong> OLD_SCENE_ID = createField("old_scene_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "上一次可复用指标计算ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.old_result_table_name</code>. 上一次可复用取数结果表名
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> OLD_RESULT_TABLE_NAME = createField("old_result_table_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "上一次可复用取数结果表名");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.sample_sql</code>. 样本计算SQL
     */
    public final TableField<CalcIndicatorAccRecordRecord, String> SAMPLE_SQL = createField("sample_sql", org.jooq.impl.SQLDataType.CLOB, this, "样本计算SQL");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.has_need_completion</code>. 是否需要在线补全：0不需要，1需要
     */
    public final TableField<CalcIndicatorAccRecordRecord, Integer> HAS_NEED_COMPLETION = createField("has_need_completion", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否需要在线补全：0不需要，1需要");

    /**
     * The column <code>SMETA_APP.calc_indicator_acc_record.is_pst</code>. 取数时间 是否是美国时间（1：是美国时间，0：是中国时间）
     */
    public final TableField<CalcIndicatorAccRecordRecord, Integer> IS_PST = createField("is_pst", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "取数时间 是否是美国时间（1：是美国时间，0：是中国时间）");

    /**
     * Create a <code>SMETA_APP.calc_indicator_acc_record</code> table reference
     */
    public CalcIndicatorAccRecord() {
        this(DSL.name("calc_indicator_acc_record"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_acc_record</code> table reference
     */
    public CalcIndicatorAccRecord(String alias) {
        this(DSL.name(alias), CALC_INDICATOR_ACC_RECORD);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_acc_record</code> table reference
     */
    public CalcIndicatorAccRecord(Name alias) {
        this(alias, CALC_INDICATOR_ACC_RECORD);
    }

    private CalcIndicatorAccRecord(Name alias, Table<CalcIndicatorAccRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcIndicatorAccRecord(Name alias, Table<CalcIndicatorAccRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "事件指标取数定义");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_INDICATOR_ACC_RECORD_PRIMARY, Indexes.CALC_INDICATOR_ACC_RECORD_UK_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcIndicatorAccRecordRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_INDICATOR_ACC_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcIndicatorAccRecordRecord> getPrimaryKey() {
        return Keys.KEY_CALC_INDICATOR_ACC_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcIndicatorAccRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcIndicatorAccRecordRecord>>asList(Keys.KEY_CALC_INDICATOR_ACC_RECORD_PRIMARY, Keys.KEY_CALC_INDICATOR_ACC_RECORD_UK_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorAccRecord as(String alias) {
        return new CalcIndicatorAccRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorAccRecord as(Name alias) {
        return new CalcIndicatorAccRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorAccRecord rename(String name) {
        return new CalcIndicatorAccRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorAccRecord rename(Name name) {
        return new CalcIndicatorAccRecord(name, null);
    }
}
