/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.RayPushLogRecord;


/**
 * 进入推送页面及推送的日志
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RayPushLog extends TableImpl<RayPushLogRecord> {

    private static final long serialVersionUID = 853155912;

    /**
     * The reference instance of <code>SMETA_APP.ray_push_log</code>
     */
    public static final RayPushLog RAY_PUSH_LOG = new RayPushLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RayPushLogRecord> getRecordType() {
        return RayPushLogRecord.class;
    }

    /**
     * The column <code>SMETA_APP.ray_push_log.id</code>. 主键
     */
    public final TableField<RayPushLogRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.ray_push_log.gmt_create</code>. 创建时间
     */
    public final TableField<RayPushLogRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.ray_push_log.gmt_modified</code>. 修改时间
     */
    public final TableField<RayPushLogRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.ray_push_log.biz_id</code>. 创建者唯一标识符
     */
    public final TableField<RayPushLogRecord, String> BIZ_ID = createField("biz_id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "创建者唯一标识符");

    /**
     * The column <code>SMETA_APP.ray_push_log.tenant_code</code>. 租户id
     */
    public final TableField<RayPushLogRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "租户id");

    /**
     * The column <code>SMETA_APP.ray_push_log.standard_check_result</code>. 标准化检测的结果
     */
    public final TableField<RayPushLogRecord, String> STANDARD_CHECK_RESULT = createField("standard_check_result", org.jooq.impl.SQLDataType.VARCHAR(20), this, "标准化检测的结果");

    /**
     * The column <code>SMETA_APP.ray_push_log.feature_info</code>. 特征详细描述json
     */
    public final TableField<RayPushLogRecord, String> FEATURE_INFO = createField("feature_info", org.jooq.impl.SQLDataType.CLOB, this, "特征详细描述json");

    /**
     * The column <code>SMETA_APP.ray_push_log.preheat_id</code>. 联合唯一主键
     */
    public final TableField<RayPushLogRecord, ULong> PREHEAT_ID = createField("preheat_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "联合唯一主键");

    /**
     * The column <code>SMETA_APP.ray_push_log.pai_exp_id</code>. 联合唯一主键
     */
    public final TableField<RayPushLogRecord, ULong> PAI_EXP_ID = createField("pai_exp_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "联合唯一主键");

    /**
     * The column <code>SMETA_APP.ray_push_log.pai_exp_name</code>. 实验名称
     */
    public final TableField<RayPushLogRecord, String> PAI_EXP_NAME = createField("pai_exp_name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "实验名称");

    /**
     * The column <code>SMETA_APP.ray_push_log.xflow</code>. xflow文件地址
     */
    public final TableField<RayPushLogRecord, String> XFLOW = createField("xflow", org.jooq.impl.SQLDataType.VARCHAR(500), this, "xflow文件地址");

    /**
     * The column <code>SMETA_APP.ray_push_log.feature_push_info</code>. 每个变量的推送明细json
     */
    public final TableField<RayPushLogRecord, String> FEATURE_PUSH_INFO = createField("feature_push_info", org.jooq.impl.SQLDataType.CLOB, this, "每个变量的推送明细json");

    /**
     * The column <code>SMETA_APP.ray_push_log.feature_push_status</code>. 总体推送进度
     */
    public final TableField<RayPushLogRecord, String> FEATURE_PUSH_STATUS = createField("feature_push_status", org.jooq.impl.SQLDataType.VARCHAR(20), this, "总体推送进度");

    /**
     * The column <code>SMETA_APP.ray_push_log.model_info</code>. 模型详细信息
     */
    public final TableField<RayPushLogRecord, String> MODEL_INFO = createField("model_info", org.jooq.impl.SQLDataType.CLOB, this, "模型详细信息");

    /**
     * The column <code>SMETA_APP.ray_push_log.model_push_status</code>. 模型推送状态
     */
    public final TableField<RayPushLogRecord, String> MODEL_PUSH_STATUS = createField("model_push_status", org.jooq.impl.SQLDataType.VARCHAR(20), this, "模型推送状态");

    /**
     * The column <code>SMETA_APP.ray_push_log.sql_log_id</code>. 执行sql记录id
     */
    public final TableField<RayPushLogRecord, ULong> SQL_LOG_ID = createField("sql_log_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "执行sql记录id");

    /**
     * The column <code>SMETA_APP.ray_push_log.pai_exp_project</code>. 实验工程
     */
    public final TableField<RayPushLogRecord, String> PAI_EXP_PROJECT = createField("pai_exp_project", org.jooq.impl.SQLDataType.VARCHAR(200), this, "实验工程");

    /**
     * The column <code>SMETA_APP.ray_push_log.emp_id</code>. 创建者工号
     */
    public final TableField<RayPushLogRecord, String> EMP_ID = createField("emp_id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "创建者工号");

    /**
     * The column <code>SMETA_APP.ray_push_log.standard_check_fail_reason</code>. 标准化检测失败原因
     */
    public final TableField<RayPushLogRecord, String> STANDARD_CHECK_FAIL_REASON = createField("standard_check_fail_reason", org.jooq.impl.SQLDataType.CLOB, this, "标准化检测失败原因");

    /**
     * The column <code>SMETA_APP.ray_push_log.model_upload_status</code>. 模型文件上传状态
     */
    public final TableField<RayPushLogRecord, String> MODEL_UPLOAD_STATUS = createField("model_upload_status", org.jooq.impl.SQLDataType.VARCHAR(20), this, "模型文件上传状态");

    /**
     * The column <code>SMETA_APP.ray_push_log.push_type</code>. 推送类型
     */
    public final TableField<RayPushLogRecord, String> PUSH_TYPE = createField("push_type", org.jooq.impl.SQLDataType.VARCHAR(20), this, "推送类型");

    /**
     * Create a <code>SMETA_APP.ray_push_log</code> table reference
     */
    public RayPushLog() {
        this(DSL.name("ray_push_log"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_push_log</code> table reference
     */
    public RayPushLog(String alias) {
        this(DSL.name(alias), RAY_PUSH_LOG);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_push_log</code> table reference
     */
    public RayPushLog(Name alias) {
        this(alias, RAY_PUSH_LOG);
    }

    private RayPushLog(Name alias, Table<RayPushLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private RayPushLog(Name alias, Table<RayPushLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "进入推送页面及推送的日志");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RAY_PUSH_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RayPushLogRecord, ULong> getIdentity() {
        return Keys.IDENTITY_RAY_PUSH_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RayPushLogRecord> getPrimaryKey() {
        return Keys.KEY_RAY_PUSH_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RayPushLogRecord>> getKeys() {
        return Arrays.<UniqueKey<RayPushLogRecord>>asList(Keys.KEY_RAY_PUSH_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RayPushLog as(String alias) {
        return new RayPushLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RayPushLog as(Name alias) {
        return new RayPushLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RayPushLog rename(String name) {
        return new RayPushLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RayPushLog rename(Name name) {
        return new RayPushLog(name, null);
    }
}
