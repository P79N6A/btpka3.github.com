/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.IndicatorCategoryRecord;


/**
 * 指标类目（分
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndicatorCategory extends TableImpl<IndicatorCategoryRecord> {

    private static final long serialVersionUID = -477161189;

    /**
     * The reference instance of <code>SMETA_APP.indicator_category</code>
     */
    public static final IndicatorCategory INDICATOR_CATEGORY = new IndicatorCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndicatorCategoryRecord> getRecordType() {
        return IndicatorCategoryRecord.class;
    }

    /**
     * The column <code>SMETA_APP.indicator_category.id</code>. 主键
     */
    public final TableField<IndicatorCategoryRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.indicator_category.gmt_create</code>. 创建时间
     */
    public final TableField<IndicatorCategoryRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.indicator_category.gmt_modified</code>. 修改时间
     */
    public final TableField<IndicatorCategoryRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.indicator_category.indicator_id</code>. 指标ID（废弃）
     */
    public final TableField<IndicatorCategoryRecord, ULong> INDICATOR_ID = createField("indicator_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "指标ID（废弃）");

    /**
     * The column <code>SMETA_APP.indicator_category.category_id</code>. 指标类目ID（废弃）
     */
    public final TableField<IndicatorCategoryRecord, ULong> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "指标类目ID（废弃）");

    /**
     * The column <code>SMETA_APP.indicator_category.is_effective</code>. 是否被删除
     */
    public final TableField<IndicatorCategoryRecord, Byte> IS_EFFECTIVE = createField("is_effective", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否被删除");

    /**
     * The column <code>SMETA_APP.indicator_category.indicator_code</code>. 指标唯一code
     */
    public final TableField<IndicatorCategoryRecord, String> INDICATOR_CODE = createField("indicator_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标唯一code");

    /**
     * The column <code>SMETA_APP.indicator_category.category_code</code>. 指标类目唯一code
     */
    public final TableField<IndicatorCategoryRecord, String> CATEGORY_CODE = createField("category_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标类目唯一code");

    /**
     * The column <code>SMETA_APP.indicator_category.alias</code>. 别名
     */
    public final TableField<IndicatorCategoryRecord, String> ALIAS = createField("alias", org.jooq.impl.SQLDataType.VARCHAR(64), this, "别名");

    /**
     * Create a <code>SMETA_APP.indicator_category</code> table reference
     */
    public IndicatorCategory() {
        this(DSL.name("indicator_category"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_category</code> table reference
     */
    public IndicatorCategory(String alias) {
        this(DSL.name(alias), INDICATOR_CATEGORY);
    }

    /**
     * Create an aliased <code>SMETA_APP.indicator_category</code> table reference
     */
    public IndicatorCategory(Name alias) {
        this(alias, INDICATOR_CATEGORY);
    }

    private IndicatorCategory(Name alias, Table<IndicatorCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private IndicatorCategory(Name alias, Table<IndicatorCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标类目（分");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INDICATOR_CATEGORY_IDX_CATEGORYD_ID, Indexes.INDICATOR_CATEGORY_IDX_CATEGORY_ID, Indexes.INDICATOR_CATEGORY_IDX_ICC, Indexes.INDICATOR_CATEGORY_IDX_INDICATOR_CATEGORY, Indexes.INDICATOR_CATEGORY_IDX_IND_CA_IN_IS, Indexes.INDICATOR_CATEGORY_IDX_IND_CA_IS, Indexes.INDICATOR_CATEGORY_IDX_IND_IN_CA, Indexes.INDICATOR_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IndicatorCategoryRecord, ULong> getIdentity() {
        return Keys.IDENTITY_INDICATOR_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IndicatorCategoryRecord> getPrimaryKey() {
        return Keys.KEY_INDICATOR_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IndicatorCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<IndicatorCategoryRecord>>asList(Keys.KEY_INDICATOR_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorCategory as(String alias) {
        return new IndicatorCategory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndicatorCategory as(Name alias) {
        return new IndicatorCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorCategory rename(String name) {
        return new IndicatorCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndicatorCategory rename(Name name) {
        return new IndicatorCategory(name, null);
    }
}
