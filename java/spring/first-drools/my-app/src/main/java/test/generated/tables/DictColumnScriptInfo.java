/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictColumnScriptInfoRecord;


/**
 * 属性被脚本应用关系数据（来源dict_event_columns
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictColumnScriptInfo extends TableImpl<DictColumnScriptInfoRecord> {

    private static final long serialVersionUID = -732593361;

    /**
     * The reference instance of <code>SMETA_APP.dict_column_script_info</code>
     */
    public static final DictColumnScriptInfo DICT_COLUMN_SCRIPT_INFO = new DictColumnScriptInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictColumnScriptInfoRecord> getRecordType() {
        return DictColumnScriptInfoRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_column_script_info.id</code>. 主键
     */
    public final TableField<DictColumnScriptInfoRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.gmt_create</code>. 创建时间
     */
    public final TableField<DictColumnScriptInfoRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.event_code</code>. 事件code
     */
    public final TableField<DictColumnScriptInfoRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "事件code");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.code</code>. 属性/实体code
     */
    public final TableField<DictColumnScriptInfoRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "属性/实体code");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.type</code>. code类型，column或者entity
     */
    public final TableField<DictColumnScriptInfoRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(32), this, "code类型，column或者entity");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.ref_column_code</code>. 脚本应用属性code
     */
    public final TableField<DictColumnScriptInfoRecord, String> REF_COLUMN_CODE = createField("ref_column_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "脚本应用属性code");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.script</code>. 脚本
     */
    public final TableField<DictColumnScriptInfoRecord, String> SCRIPT = createField("script", org.jooq.impl.SQLDataType.CLOB, this, "脚本");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.project_codes</code>. 属性被引用的projectCode，多个值逗号分隔
     */
    public final TableField<DictColumnScriptInfoRecord, String> PROJECT_CODES = createField("project_codes", org.jooq.impl.SQLDataType.VARCHAR(256), this, "属性被引用的projectCode，多个值逗号分隔");

    /**
     * The column <code>SMETA_APP.dict_column_script_info.ref_type</code>. 类型entity实体或实体属性，column属性
     */
    public final TableField<DictColumnScriptInfoRecord, String> REF_TYPE = createField("ref_type", org.jooq.impl.SQLDataType.VARCHAR(32), this, "类型entity实体或实体属性，column属性");

    /**
     * Create a <code>SMETA_APP.dict_column_script_info</code> table reference
     */
    public DictColumnScriptInfo() {
        this(DSL.name("dict_column_script_info"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_column_script_info</code> table reference
     */
    public DictColumnScriptInfo(String alias) {
        this(DSL.name(alias), DICT_COLUMN_SCRIPT_INFO);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_column_script_info</code> table reference
     */
    public DictColumnScriptInfo(Name alias) {
        this(alias, DICT_COLUMN_SCRIPT_INFO);
    }

    private DictColumnScriptInfo(Name alias, Table<DictColumnScriptInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictColumnScriptInfo(Name alias, Table<DictColumnScriptInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "属性被脚本应用关系数据（来源dict_event_columns");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_COLUMN_SCRIPT_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictColumnScriptInfoRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_COLUMN_SCRIPT_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictColumnScriptInfoRecord> getPrimaryKey() {
        return Keys.KEY_DICT_COLUMN_SCRIPT_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictColumnScriptInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<DictColumnScriptInfoRecord>>asList(Keys.KEY_DICT_COLUMN_SCRIPT_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictColumnScriptInfo as(String alias) {
        return new DictColumnScriptInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictColumnScriptInfo as(Name alias) {
        return new DictColumnScriptInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictColumnScriptInfo rename(String name) {
        return new DictColumnScriptInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictColumnScriptInfo rename(Name name) {
        return new DictColumnScriptInfo(name, null);
    }
}
