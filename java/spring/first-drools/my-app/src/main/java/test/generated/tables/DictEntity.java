/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictEntityRecord;


/**
 * 字典实体信息表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictEntity extends TableImpl<DictEntityRecord> {

    private static final long serialVersionUID = 1754496751;

    /**
     * The reference instance of <code>SMETA_APP.dict_entity</code>
     */
    public static final DictEntity DICT_ENTITY = new DictEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictEntityRecord> getRecordType() {
        return DictEntityRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_entity.id</code>. 主键
     */
    public final TableField<DictEntityRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_entity.gmt_create</code>. 创建时间
     */
    public final TableField<DictEntityRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_entity.gmt_modified</code>. 修改时间
     */
    public final TableField<DictEntityRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_entity.cn_name</code>. 实体中文名称
     */
    public final TableField<DictEntityRecord, String> CN_NAME = createField("cn_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "实体中文名称");

    /**
     * The column <code>SMETA_APP.dict_entity.en_name</code>. 实体英文名称
     */
    public final TableField<DictEntityRecord, String> EN_NAME = createField("en_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "实体英文名称");

    /**
     * The column <code>SMETA_APP.dict_entity.code</code>. 实体代码
     */
    public final TableField<DictEntityRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "实体代码");

    /**
     * The column <code>SMETA_APP.dict_entity.status</code>. 0 删除 1 已上线 2 草稿 3 审核中
     */
    public final TableField<DictEntityRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0 删除 1 已上线 2 草稿 3 审核中");

    /**
     * The column <code>SMETA_APP.dict_entity.operator_id</code>. 操作人工号
     */
    public final TableField<DictEntityRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作人工号");

    /**
     * The column <code>SMETA_APP.dict_entity.operator</code>. 操作人
     */
    public final TableField<DictEntityRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.dict_entity.src_sys</code>. 源系统
     */
    public final TableField<DictEntityRecord, String> SRC_SYS = createField("src_sys", org.jooq.impl.SQLDataType.VARCHAR(128), this, "源系统");

    /**
     * The column <code>SMETA_APP.dict_entity.src_biz_pd</code>. 源业务pd
     */
    public final TableField<DictEntityRecord, String> SRC_BIZ_PD = createField("src_biz_pd", org.jooq.impl.SQLDataType.VARCHAR(64), this, "源业务pd");

    /**
     * The column <code>SMETA_APP.dict_entity.src_biz_tech</code>. 源业务技术
     */
    public final TableField<DictEntityRecord, String> SRC_BIZ_TECH = createField("src_biz_tech", org.jooq.impl.SQLDataType.VARCHAR(64), this, "源业务技术");

    /**
     * The column <code>SMETA_APP.dict_entity.bu</code>. BU
     */
    public final TableField<DictEntityRecord, String> BU = createField("bu", org.jooq.impl.SQLDataType.VARCHAR(128), this, "BU");

    /**
     * The column <code>SMETA_APP.dict_entity.proto_type</code>. 是否原生实体，0：原生实体，1：实体别名
     */
    public final TableField<DictEntityRecord, Byte> PROTO_TYPE = createField("proto_type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否原生实体，0：原生实体，1：实体别名");

    /**
     * The column <code>SMETA_APP.dict_entity.parent_code</code>. 别名实体指向原生实体的code
     */
    public final TableField<DictEntityRecord, String> PARENT_CODE = createField("parent_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "别名实体指向原生实体的code");

    /**
     * The column <code>SMETA_APP.dict_entity.cost</code>. 补全成本，数值越小，成本越低
     */
    public final TableField<DictEntityRecord, Integer> COST = createField("cost", org.jooq.impl.SQLDataType.INTEGER, this, "补全成本，数值越小，成本越低");

    /**
     * The column <code>SMETA_APP.dict_entity.tenant_code</code>. 租户code
     */
    public final TableField<DictEntityRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("ali_taobao", org.jooq.impl.SQLDataType.VARCHAR)), this, "租户code");

    /**
     * The column <code>SMETA_APP.dict_entity.offline_table</code>. 实体对应离线表（用于离线分析计算）
     */
    public final TableField<DictEntityRecord, String> OFFLINE_TABLE = createField("offline_table", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体对应离线表（用于离线分析计算）");

    /**
     * The column <code>SMETA_APP.dict_entity.offline_table_pk</code>. 实体对应离线表主键（用于离线分析计算）
     */
    public final TableField<DictEntityRecord, String> OFFLINE_TABLE_PK = createField("offline_table_pk", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体对应离线表主键（用于离线分析计算）");

    /**
     * The column <code>SMETA_APP.dict_entity.func_para</code>. 可能的实体的函数列表
     */
    public final TableField<DictEntityRecord, String> FUNC_PARA = createField("func_para", org.jooq.impl.SQLDataType.CLOB, this, "可能的实体的函数列表");

    /**
     * Create a <code>SMETA_APP.dict_entity</code> table reference
     */
    public DictEntity() {
        this(DSL.name("dict_entity"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_entity</code> table reference
     */
    public DictEntity(String alias) {
        this(DSL.name(alias), DICT_ENTITY);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_entity</code> table reference
     */
    public DictEntity(Name alias) {
        this(alias, DICT_ENTITY);
    }

    private DictEntity(Name alias, Table<DictEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictEntity(Name alias, Table<DictEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "字典实体信息表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_ENTITY_IDX_CN_NAME, Indexes.DICT_ENTITY_IDX_CODE, Indexes.DICT_ENTITY_IDX_EN_NAME, Indexes.DICT_ENTITY_PRIMARY, Indexes.DICT_ENTITY_UK_CODE_TENANT, Indexes.DICT_ENTITY_UK_NAME_TENANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictEntityRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_ENTITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictEntityRecord> getPrimaryKey() {
        return Keys.KEY_DICT_ENTITY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<DictEntityRecord>>asList(Keys.KEY_DICT_ENTITY_PRIMARY, Keys.KEY_DICT_ENTITY_UK_NAME_TENANT, Keys.KEY_DICT_ENTITY_UK_CODE_TENANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEntity as(String alias) {
        return new DictEntity(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEntity as(Name alias) {
        return new DictEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEntity rename(String name) {
        return new DictEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEntity rename(Name name) {
        return new DictEntity(name, null);
    }
}
