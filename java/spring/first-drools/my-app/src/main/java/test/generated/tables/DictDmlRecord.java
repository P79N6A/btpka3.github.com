/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictDmlRecordRecord;


/**
 * 字典dml语句记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictDmlRecord extends TableImpl<DictDmlRecordRecord> {

    private static final long serialVersionUID = 1500056997;

    /**
     * The reference instance of <code>SMETA_APP.dict_dml_record</code>
     */
    public static final DictDmlRecord DICT_DML_RECORD = new DictDmlRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictDmlRecordRecord> getRecordType() {
        return DictDmlRecordRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_dml_record.id</code>. 主键
     */
    public final TableField<DictDmlRecordRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_dml_record.gmt_create</code>. 创建时间
     */
    public final TableField<DictDmlRecordRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_dml_record.gmt_modified</code>. 修改时间
     */
    public final TableField<DictDmlRecordRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_dml_record.operator_id</code>. 操作人工号
     */
    public final TableField<DictDmlRecordRecord, Long> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "操作人工号");

    /**
     * The column <code>SMETA_APP.dict_dml_record.method_path</code>. 控制层方法路径
     */
    public final TableField<DictDmlRecordRecord, String> METHOD_PATH = createField("method_path", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "控制层方法路径");

    /**
     * The column <code>SMETA_APP.dict_dml_record.dml_sql_script</code>. DML sql脚本
     */
    public final TableField<DictDmlRecordRecord, String> DML_SQL_SCRIPT = createField("dml_sql_script", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "DML sql脚本");

    /**
     * The column <code>SMETA_APP.dict_dml_record.undo_sql_script</code>. sql还原脚本
     */
    public final TableField<DictDmlRecordRecord, String> UNDO_SQL_SCRIPT = createField("undo_sql_script", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "sql还原脚本");

    /**
     * The column <code>SMETA_APP.dict_dml_record.operator_nick</code>. 操作者花名

     */
    public final TableField<DictDmlRecordRecord, String> OPERATOR_NICK = createField("operator_nick", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "操作者花名\n");

    /**
     * Create a <code>SMETA_APP.dict_dml_record</code> table reference
     */
    public DictDmlRecord() {
        this(DSL.name("dict_dml_record"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_dml_record</code> table reference
     */
    public DictDmlRecord(String alias) {
        this(DSL.name(alias), DICT_DML_RECORD);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_dml_record</code> table reference
     */
    public DictDmlRecord(Name alias) {
        this(alias, DICT_DML_RECORD);
    }

    private DictDmlRecord(Name alias, Table<DictDmlRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictDmlRecord(Name alias, Table<DictDmlRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "字典dml语句记录表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_DML_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictDmlRecordRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_DML_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictDmlRecordRecord> getPrimaryKey() {
        return Keys.KEY_DICT_DML_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictDmlRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<DictDmlRecordRecord>>asList(Keys.KEY_DICT_DML_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictDmlRecord as(String alias) {
        return new DictDmlRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictDmlRecord as(Name alias) {
        return new DictDmlRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictDmlRecord rename(String name) {
        return new DictDmlRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictDmlRecord rename(Name name) {
        return new DictDmlRecord(name, null);
    }
}
