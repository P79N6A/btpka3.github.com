/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictMappingEventColumnsRecord;


/**
 * mtee 事件迁移属性表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictMappingEventColumns extends TableImpl<DictMappingEventColumnsRecord> {

    private static final long serialVersionUID = -370866;

    /**
     * The reference instance of <code>SMETA_APP.dict_mapping_event_columns</code>
     */
    public static final DictMappingEventColumns DICT_MAPPING_EVENT_COLUMNS = new DictMappingEventColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictMappingEventColumnsRecord> getRecordType() {
        return DictMappingEventColumnsRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.id</code>. 主键
     */
    public final TableField<DictMappingEventColumnsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.gmt_create</code>. 创建时间
     */
    public final TableField<DictMappingEventColumnsRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.gmt_modified</code>. 修改时间
     */
    public final TableField<DictMappingEventColumnsRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.event_code</code>. 事件编码
     */
    public final TableField<DictMappingEventColumnsRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "事件编码");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.old_name</code>. 老路径
     */
    public final TableField<DictMappingEventColumnsRecord, String> OLD_NAME = createField("old_name", org.jooq.impl.SQLDataType.VARCHAR(256), this, "老路径");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.old_script</code>. 老脚本
     */
    public final TableField<DictMappingEventColumnsRecord, String> OLD_SCRIPT = createField("old_script", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "老脚本");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.old_data_type</code>. 老数据类型
     */
    public final TableField<DictMappingEventColumnsRecord, String> OLD_DATA_TYPE = createField("old_data_type", org.jooq.impl.SQLDataType.VARCHAR(32), this, "老数据类型");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.column_type</code>. 属性类型
     */
    public final TableField<DictMappingEventColumnsRecord, Integer> COLUMN_TYPE = createField("column_type", org.jooq.impl.SQLDataType.INTEGER, this, "属性类型");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.new_column_code</code>. 属性code
     */
    public final TableField<DictMappingEventColumnsRecord, String> NEW_COLUMN_CODE = createField("new_column_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "属性code");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.new_column_script</code>. 新属性脚本
     */
    public final TableField<DictMappingEventColumnsRecord, String> NEW_COLUMN_SCRIPT = createField("new_column_script", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "新属性脚本");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.sample_data</code>. 样本值
     */
    public final TableField<DictMappingEventColumnsRecord, String> SAMPLE_DATA = createField("sample_data", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "样本值");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.match_level</code>. 匹配等级
     */
    public final TableField<DictMappingEventColumnsRecord, String> MATCH_LEVEL = createField("match_level", org.jooq.impl.SQLDataType.VARCHAR(64), this, "匹配等级");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.operator_id</code>. 操作人ID
     */
    public final TableField<DictMappingEventColumnsRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "操作人ID");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.operator</code>. 操作人
     */
    public final TableField<DictMappingEventColumnsRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(32), this, "操作人");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.comment</code>. 备注
     */
    public final TableField<DictMappingEventColumnsRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "备注");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.new_entity_code</code>. 实体code
     */
    public final TableField<DictMappingEventColumnsRecord, String> NEW_ENTITY_CODE = createField("new_entity_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体code");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.column_id</code>. 属性ID
     */
    public final TableField<DictMappingEventColumnsRecord, Long> COLUMN_ID = createField("column_id", org.jooq.impl.SQLDataType.BIGINT, this, "属性ID");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.new_entity_script</code>. 新实体脚本
     */
    public final TableField<DictMappingEventColumnsRecord, String> NEW_ENTITY_SCRIPT = createField("new_entity_script", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "新实体脚本");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.empty_status</code>. 是否为空，1：是，0：否
     */
    public final TableField<DictMappingEventColumnsRecord, Integer> EMPTY_STATUS = createField("empty_status", org.jooq.impl.SQLDataType.INTEGER, this, "是否为空，1：是，0：否");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.enum_status</code>. 是否可枚举，1：是，0：否
     */
    public final TableField<DictMappingEventColumnsRecord, Integer> ENUM_STATUS = createField("enum_status", org.jooq.impl.SQLDataType.INTEGER, this, "是否可枚举，1：是，0：否");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.enum_value</code>. 枚举值，key：value格式存储
     */
    public final TableField<DictMappingEventColumnsRecord, String> ENUM_VALUE = createField("enum_value", org.jooq.impl.SQLDataType.VARCHAR(4096), this, "枚举值，key：value格式存储");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.status</code>. -1: 删除，1：草稿、2：待审核、3：有效
     */
    public final TableField<DictMappingEventColumnsRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "-1: 删除，1：草稿、2：待审核、3：有效");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.creater</code>. 创建人
     */
    public final TableField<DictMappingEventColumnsRecord, String> CREATER = createField("creater", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "创建人");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.creater_id</code>. 创建人ID
     */
    public final TableField<DictMappingEventColumnsRecord, String> CREATER_ID = createField("creater_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "创建人ID");

    /**
     * The column <code>SMETA_APP.dict_mapping_event_columns.audit_comment</code>. 审核备注
     */
    public final TableField<DictMappingEventColumnsRecord, String> AUDIT_COMMENT = createField("audit_comment", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "审核备注");

    /**
     * Create a <code>SMETA_APP.dict_mapping_event_columns</code> table reference
     */
    public DictMappingEventColumns() {
        this(DSL.name("dict_mapping_event_columns"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_mapping_event_columns</code> table reference
     */
    public DictMappingEventColumns(String alias) {
        this(DSL.name(alias), DICT_MAPPING_EVENT_COLUMNS);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_mapping_event_columns</code> table reference
     */
    public DictMappingEventColumns(Name alias) {
        this(alias, DICT_MAPPING_EVENT_COLUMNS);
    }

    private DictMappingEventColumns(Name alias, Table<DictMappingEventColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictMappingEventColumns(Name alias, Table<DictMappingEventColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "mtee 事件迁移属性表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_MAPPING_EVENT_COLUMNS_IDX_EVENT_CODE, Indexes.DICT_MAPPING_EVENT_COLUMNS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictMappingEventColumnsRecord, Long> getIdentity() {
        return Keys.IDENTITY_DICT_MAPPING_EVENT_COLUMNS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictMappingEventColumnsRecord> getPrimaryKey() {
        return Keys.KEY_DICT_MAPPING_EVENT_COLUMNS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictMappingEventColumnsRecord>> getKeys() {
        return Arrays.<UniqueKey<DictMappingEventColumnsRecord>>asList(Keys.KEY_DICT_MAPPING_EVENT_COLUMNS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictMappingEventColumns as(String alias) {
        return new DictMappingEventColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictMappingEventColumns as(Name alias) {
        return new DictMappingEventColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictMappingEventColumns rename(String name) {
        return new DictMappingEventColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictMappingEventColumns rename(Name name) {
        return new DictMappingEventColumns(name, null);
    }
}
