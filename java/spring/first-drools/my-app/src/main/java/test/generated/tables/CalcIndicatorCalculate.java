/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.CalcIndicatorCalculateRecord;


/**
 * 指标周期性计算
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CalcIndicatorCalculate extends TableImpl<CalcIndicatorCalculateRecord> {

    private static final long serialVersionUID = 379542426;

    /**
     * The reference instance of <code>SMETA_APP.calc_indicator_calculate</code>
     */
    public static final CalcIndicatorCalculate CALC_INDICATOR_CALCULATE = new CalcIndicatorCalculate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalcIndicatorCalculateRecord> getRecordType() {
        return CalcIndicatorCalculateRecord.class;
    }

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.id</code>. 主键
     */
    public final TableField<CalcIndicatorCalculateRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.gmt_create</code>. 创建时间
     */
    public final TableField<CalcIndicatorCalculateRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.gmt_modified</code>. 修改时间
     */
    public final TableField<CalcIndicatorCalculateRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.created_by</code>. 创建人
     */
    public final TableField<CalcIndicatorCalculateRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "创建人");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.updated_by</code>. 修改人
     */
    public final TableField<CalcIndicatorCalculateRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "修改人");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.indicator_code</code>. 指标编码
     */
    public final TableField<CalcIndicatorCalculateRecord, String> INDICATOR_CODE = createField("indicator_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "指标编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.indicator_name</code>. 指标名称
     */
    public final TableField<CalcIndicatorCalculateRecord, String> INDICATOR_NAME = createField("indicator_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "指标名称");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calc_frequency</code>. 计算频率：0周期性按天，2周期性按小时
     */
    public final TableField<CalcIndicatorCalculateRecord, Integer> CALC_FREQUENCY = createField("calc_frequency", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "计算频率：0周期性按天，2周期性按小时");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.store_table</code>. 存储表
     */
    public final TableField<CalcIndicatorCalculateRecord, String> STORE_TABLE = createField("store_table", org.jooq.impl.SQLDataType.VARCHAR(128), this, "存储表");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calculate_status</code>. 任务状态： 已删除0，等待中1，运行中2，审核中3，审核拒绝4
     */
    public final TableField<CalcIndicatorCalculateRecord, Integer> CALCULATE_STATUS = createField("calculate_status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "任务状态： 已删除0，等待中1，运行中2，审核中3，审核拒绝4");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calculate_code</code>. 计算编码
     */
    public final TableField<CalcIndicatorCalculateRecord, String> CALCULATE_CODE = createField("calculate_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "计算编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.ddl_node_id</code>. DDL建表任务节点ID
     */
    public final TableField<CalcIndicatorCalculateRecord, String> DDL_NODE_ID = createField("ddl_node_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "DDL建表任务节点ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.ddl_sql</code>. DDL建表脚本
     */
    public final TableField<CalcIndicatorCalculateRecord, String> DDL_SQL = createField("ddl_sql", org.jooq.impl.SQLDataType.CLOB, this, "DDL建表脚本");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calc_node_id</code>. 计算任务节点ID
     */
    public final TableField<CalcIndicatorCalculateRecord, String> CALC_NODE_ID = createField("calc_node_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "计算任务节点ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calc_sql</code>. 计算脚本
     */
    public final TableField<CalcIndicatorCalculateRecord, String> CALC_SQL = createField("calc_sql", org.jooq.impl.SQLDataType.CLOB, this, "计算脚本");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.task_id</code>. 任务实例ID
     */
    public final TableField<CalcIndicatorCalculateRecord, String> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "任务实例ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.task_owner_id</code>. 任务负责人ID
     */
    public final TableField<CalcIndicatorCalculateRecord, String> TASK_OWNER_ID = createField("task_owner_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "任务负责人ID");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.task_owner</code>. 任务负责人
     */
    public final TableField<CalcIndicatorCalculateRecord, String> TASK_OWNER = createField("task_owner", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "任务负责人");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.table_name</code>. 计算事件上云表
     */
    public final TableField<CalcIndicatorCalculateRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "计算事件上云表");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calculate_event</code>. 计算事件编码
     */
    public final TableField<CalcIndicatorCalculateRecord, String> CALCULATE_EVENT = createField("calculate_event", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "计算事件编码");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.calculate_model</code>. 计算模式：事件级，窗口级
     */
    public final TableField<CalcIndicatorCalculateRecord, String> CALCULATE_MODEL = createField("calculate_model", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "计算模式：事件级，窗口级");

    /**
     * The column <code>SMETA_APP.calc_indicator_calculate.groupby</code>. 指标主键集合
     */
    public final TableField<CalcIndicatorCalculateRecord, String> GROUPBY = createField("groupby", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "指标主键集合");

    /**
     * Create a <code>SMETA_APP.calc_indicator_calculate</code> table reference
     */
    public CalcIndicatorCalculate() {
        this(DSL.name("calc_indicator_calculate"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_calculate</code> table reference
     */
    public CalcIndicatorCalculate(String alias) {
        this(DSL.name(alias), CALC_INDICATOR_CALCULATE);
    }

    /**
     * Create an aliased <code>SMETA_APP.calc_indicator_calculate</code> table reference
     */
    public CalcIndicatorCalculate(Name alias) {
        this(alias, CALC_INDICATOR_CALCULATE);
    }

    private CalcIndicatorCalculate(Name alias, Table<CalcIndicatorCalculateRecord> aliased) {
        this(alias, aliased, null);
    }

    private CalcIndicatorCalculate(Name alias, Table<CalcIndicatorCalculateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "指标周期性计算");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CALC_INDICATOR_CALCULATE_IDX_CALCULATE_CODE, Indexes.CALC_INDICATOR_CALCULATE_IDX_CR_UP_CA, Indexes.CALC_INDICATOR_CALCULATE_IDX_INDICATOR_CODE_CALC_FREQUENCY, Indexes.CALC_INDICATOR_CALCULATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CalcIndicatorCalculateRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CALC_INDICATOR_CALCULATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CalcIndicatorCalculateRecord> getPrimaryKey() {
        return Keys.KEY_CALC_INDICATOR_CALCULATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CalcIndicatorCalculateRecord>> getKeys() {
        return Arrays.<UniqueKey<CalcIndicatorCalculateRecord>>asList(Keys.KEY_CALC_INDICATOR_CALCULATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorCalculate as(String alias) {
        return new CalcIndicatorCalculate(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CalcIndicatorCalculate as(Name alias) {
        return new CalcIndicatorCalculate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorCalculate rename(String name) {
        return new CalcIndicatorCalculate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CalcIndicatorCalculate rename(Name name) {
        return new CalcIndicatorCalculate(name, null);
    }
}
