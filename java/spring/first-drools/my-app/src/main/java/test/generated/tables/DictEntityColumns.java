/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictEntityColumnsRecord;


/**
 * 字典实体属性关系表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictEntityColumns extends TableImpl<DictEntityColumnsRecord> {

    private static final long serialVersionUID = 977562242;

    /**
     * The reference instance of <code>SMETA_APP.dict_entity_columns</code>
     */
    public static final DictEntityColumns DICT_ENTITY_COLUMNS = new DictEntityColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictEntityColumnsRecord> getRecordType() {
        return DictEntityColumnsRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_entity_columns.id</code>. 主键
     */
    public final TableField<DictEntityColumnsRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.gmt_create</code>. 创建时间
     */
    public final TableField<DictEntityColumnsRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.gmt_modified</code>. 修改时间
     */
    public final TableField<DictEntityColumnsRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.entity_code</code>. 实体code
     */
    public final TableField<DictEntityColumnsRecord, String> ENTITY_CODE = createField("entity_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "实体code");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.column_code</code>. 属性code
     */
    public final TableField<DictEntityColumnsRecord, String> COLUMN_CODE = createField("column_code", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "属性code");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.empty_status</code>. 是否非空，1：是，0：否
     */
    public final TableField<DictEntityColumnsRecord, Byte> EMPTY_STATUS = createField("empty_status", org.jooq.impl.SQLDataType.TINYINT, this, "是否非空，1：是，0：否");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.enum_status</code>. 是否可枚举，1：是，0：否
     */
    public final TableField<DictEntityColumnsRecord, Byte> ENUM_STATUS = createField("enum_status", org.jooq.impl.SQLDataType.TINYINT, this, "是否可枚举，1：是，0：否");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.enum_value</code>. 枚举值，key：value格式存储
     */
    public final TableField<DictEntityColumnsRecord, String> ENUM_VALUE = createField("enum_value", org.jooq.impl.SQLDataType.CLOB, this, "枚举值，key：value格式存储");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.comment</code>. 备注
     */
    public final TableField<DictEntityColumnsRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "备注");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.script</code>. 自定义脚本
     */
    public final TableField<DictEntityColumnsRecord, String> SCRIPT = createField("script", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "自定义脚本");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.operator_id</code>. 操作人工号
     */
    public final TableField<DictEntityColumnsRecord, String> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作人工号");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.operator</code>. 操作人
     */
    public final TableField<DictEntityColumnsRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "操作人");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.indi_code</code>. 对应指标编码，获得线下数据
     */
    public final TableField<DictEntityColumnsRecord, String> INDI_CODE = createField("indi_code", org.jooq.impl.SQLDataType.VARCHAR(64), this, "对应指标编码，获得线下数据");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.tenant_code</code>. 租户code

     */
    public final TableField<DictEntityColumnsRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("ali_taobao", org.jooq.impl.SQLDataType.VARCHAR)), this, "租户code\n");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.is_high_cost</code>. 实体属性是否高成本标志。0：低成本 1：高成本
     */
    public final TableField<DictEntityColumnsRecord, String> IS_HIGH_COST = createField("is_high_cost", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "实体属性是否高成本标志。0：低成本 1：高成本");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.offline_script</code>. 离线取数脚本，用于离线补全
     */
    public final TableField<DictEntityColumnsRecord, String> OFFLINE_SCRIPT = createField("offline_script", org.jooq.impl.SQLDataType.CLOB, this, "离线取数脚本，用于离线补全");

    /**
     * The column <code>SMETA_APP.dict_entity_columns.offline_table_column</code>. 实体对应离线表字段（用于离线分析计算）
     */
    public final TableField<DictEntityColumnsRecord, String> OFFLINE_TABLE_COLUMN = createField("offline_table_column", org.jooq.impl.SQLDataType.VARCHAR(128), this, "实体对应离线表字段（用于离线分析计算）");

    /**
     * Create a <code>SMETA_APP.dict_entity_columns</code> table reference
     */
    public DictEntityColumns() {
        this(DSL.name("dict_entity_columns"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_entity_columns</code> table reference
     */
    public DictEntityColumns(String alias) {
        this(DSL.name(alias), DICT_ENTITY_COLUMNS);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_entity_columns</code> table reference
     */
    public DictEntityColumns(Name alias) {
        this(alias, DICT_ENTITY_COLUMNS);
    }

    private DictEntityColumns(Name alias, Table<DictEntityColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictEntityColumns(Name alias, Table<DictEntityColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "字典实体属性关系表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_ENTITY_COLUMNS_IDX_COLUMN_CODE, Indexes.DICT_ENTITY_COLUMNS_PRIMARY, Indexes.DICT_ENTITY_COLUMNS_UK_ENTITY_COLUMN_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictEntityColumnsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_ENTITY_COLUMNS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictEntityColumnsRecord> getPrimaryKey() {
        return Keys.KEY_DICT_ENTITY_COLUMNS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictEntityColumnsRecord>> getKeys() {
        return Arrays.<UniqueKey<DictEntityColumnsRecord>>asList(Keys.KEY_DICT_ENTITY_COLUMNS_PRIMARY, Keys.KEY_DICT_ENTITY_COLUMNS_UK_ENTITY_COLUMN_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEntityColumns as(String alias) {
        return new DictEntityColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictEntityColumns as(Name alias) {
        return new DictEntityColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEntityColumns rename(String name) {
        return new DictEntityColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictEntityColumns rename(Name name) {
        return new DictEntityColumns(name, null);
    }
}
