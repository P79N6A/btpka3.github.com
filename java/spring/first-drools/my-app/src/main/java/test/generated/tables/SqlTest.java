/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.SqlTestRecord;


/**
 * 日常环境测试表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SqlTest extends TableImpl<SqlTestRecord> {

    private static final long serialVersionUID = 139863794;

    /**
     * The reference instance of <code>SMETA_APP.sql_test</code>
     */
    public static final SqlTest SQL_TEST = new SqlTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SqlTestRecord> getRecordType() {
        return SqlTestRecord.class;
    }

    /**
     * The column <code>SMETA_APP.sql_test.id</code>. 主键
     */
    public final TableField<SqlTestRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.sql_test.gmt_create</code>. 创建时间
     */
    public final TableField<SqlTestRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>SMETA_APP.sql_test.gmt_modified</code>. 修改时间
     */
    public final TableField<SqlTestRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * The column <code>SMETA_APP.sql_test.name</code>. 姓名

     */
    public final TableField<SqlTestRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "姓名\n");

    /**
     * The column <code>SMETA_APP.sql_test.course</code>. 课程
     */
    public final TableField<SqlTestRecord, String> COURSE = createField("course", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "课程");

    /**
     * The column <code>SMETA_APP.sql_test.score</code>. 分数
     */
    public final TableField<SqlTestRecord, Long> SCORE = createField("score", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "分数");

    /**
     * Create a <code>SMETA_APP.sql_test</code> table reference
     */
    public SqlTest() {
        this(DSL.name("sql_test"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.sql_test</code> table reference
     */
    public SqlTest(String alias) {
        this(DSL.name(alias), SQL_TEST);
    }

    /**
     * Create an aliased <code>SMETA_APP.sql_test</code> table reference
     */
    public SqlTest(Name alias) {
        this(alias, SQL_TEST);
    }

    private SqlTest(Name alias, Table<SqlTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private SqlTest(Name alias, Table<SqlTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "日常环境测试表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQL_TEST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SqlTestRecord, ULong> getIdentity() {
        return Keys.IDENTITY_SQL_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SqlTestRecord> getPrimaryKey() {
        return Keys.KEY_SQL_TEST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SqlTestRecord>> getKeys() {
        return Arrays.<UniqueKey<SqlTestRecord>>asList(Keys.KEY_SQL_TEST_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlTest as(String alias) {
        return new SqlTest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlTest as(Name alias) {
        return new SqlTest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlTest rename(String name) {
        return new SqlTest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlTest rename(Name name) {
        return new SqlTest(name, null);
    }
}
