/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.RayDataPreviewRecord;


/**
 * 数据预览
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RayDataPreview extends TableImpl<RayDataPreviewRecord> {

    private static final long serialVersionUID = -353901431;

    /**
     * The reference instance of <code>SMETA_APP.ray_data_preview</code>
     */
    public static final RayDataPreview RAY_DATA_PREVIEW = new RayDataPreview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RayDataPreviewRecord> getRecordType() {
        return RayDataPreviewRecord.class;
    }

    /**
     * The column <code>SMETA_APP.ray_data_preview.id</code>. 主键
     */
    public final TableField<RayDataPreviewRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.ray_data_preview.gmt_create</code>. 创建时间
     */
    public final TableField<RayDataPreviewRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.ray_data_preview.gmt_modified</code>. 修改时间
     */
    public final TableField<RayDataPreviewRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.ray_data_preview.preheat_id</code>. 预热id
     */
    public final TableField<RayDataPreviewRecord, ULong> PREHEAT_ID = createField("preheat_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "预热id");

    /**
     * The column <code>SMETA_APP.ray_data_preview.event_code</code>. 事件code
     */
    public final TableField<RayDataPreviewRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(50), this, "事件code");

    /**
     * The column <code>SMETA_APP.ray_data_preview.column_info</code>. 数据字段
     */
    public final TableField<RayDataPreviewRecord, String> COLUMN_INFO = createField("column_info", org.jooq.impl.SQLDataType.CLOB, this, "数据字段");

    /**
     * The column <code>SMETA_APP.ray_data_preview.rule_info</code>. 过滤规则
     */
    public final TableField<RayDataPreviewRecord, String> RULE_INFO = createField("rule_info", org.jooq.impl.SQLDataType.CLOB, this, "过滤规则");

    /**
     * The column <code>SMETA_APP.ray_data_preview.rule_version</code>. 规则版本
     */
    public final TableField<RayDataPreviewRecord, Integer> RULE_VERSION = createField("rule_version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "规则版本");

    /**
     * The column <code>SMETA_APP.ray_data_preview.rule_cache_version</code>. 规则缓存版本号
     */
    public final TableField<RayDataPreviewRecord, Integer> RULE_CACHE_VERSION = createField("rule_cache_version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "规则缓存版本号");

    /**
     * The column <code>SMETA_APP.ray_data_preview.chart_info</code>. 图表计算信息
     */
    public final TableField<RayDataPreviewRecord, String> CHART_INFO = createField("chart_info", org.jooq.impl.SQLDataType.CLOB, this, "图表计算信息");

    /**
     * The column <code>SMETA_APP.ray_data_preview.biz_id</code>.  创建人id
     */
    public final TableField<RayDataPreviewRecord, String> BIZ_ID = createField("biz_id", org.jooq.impl.SQLDataType.VARCHAR(50), this, " 创建人id");

    /**
     * The column <code>SMETA_APP.ray_data_preview.tenant_code</code>. 租户code
     */
    public final TableField<RayDataPreviewRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(50), this, "租户code");

    /**
     * The column <code>SMETA_APP.ray_data_preview.show_column_info</code>. 显示字段信息
     */
    public final TableField<RayDataPreviewRecord, String> SHOW_COLUMN_INFO = createField("show_column_info", org.jooq.impl.SQLDataType.CLOB, this, "显示字段信息");

    /**
     * The column <code>SMETA_APP.ray_data_preview.rule_info_md5</code>. 规则信息md5值
     */
    public final TableField<RayDataPreviewRecord, String> RULE_INFO_MD5 = createField("rule_info_md5", org.jooq.impl.SQLDataType.VARCHAR(128), this, "规则信息md5值");

    /**
     * The column <code>SMETA_APP.ray_data_preview.feature_recommend</code>. 特征推荐信息
     */
    public final TableField<RayDataPreviewRecord, String> FEATURE_RECOMMEND = createField("feature_recommend", org.jooq.impl.SQLDataType.CLOB, this, "特征推荐信息");

    /**
     * Create a <code>SMETA_APP.ray_data_preview</code> table reference
     */
    public RayDataPreview() {
        this(DSL.name("ray_data_preview"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_data_preview</code> table reference
     */
    public RayDataPreview(String alias) {
        this(DSL.name(alias), RAY_DATA_PREVIEW);
    }

    /**
     * Create an aliased <code>SMETA_APP.ray_data_preview</code> table reference
     */
    public RayDataPreview(Name alias) {
        this(alias, RAY_DATA_PREVIEW);
    }

    private RayDataPreview(Name alias, Table<RayDataPreviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private RayDataPreview(Name alias, Table<RayDataPreviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "数据预览");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RAY_DATA_PREVIEW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RayDataPreviewRecord, ULong> getIdentity() {
        return Keys.IDENTITY_RAY_DATA_PREVIEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RayDataPreviewRecord> getPrimaryKey() {
        return Keys.KEY_RAY_DATA_PREVIEW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RayDataPreviewRecord>> getKeys() {
        return Arrays.<UniqueKey<RayDataPreviewRecord>>asList(Keys.KEY_RAY_DATA_PREVIEW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RayDataPreview as(String alias) {
        return new RayDataPreview(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RayDataPreview as(Name alias) {
        return new RayDataPreview(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RayDataPreview rename(String name) {
        return new RayDataPreview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RayDataPreview rename(Name name) {
        return new RayDataPreview(name, null);
    }
}
