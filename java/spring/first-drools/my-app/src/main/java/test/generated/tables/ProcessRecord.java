/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.ProcessRecordRecord;


/**
 * 流程记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessRecord extends TableImpl<ProcessRecordRecord> {

    private static final long serialVersionUID = -2088333845;

    /**
     * The reference instance of <code>SMETA_APP.process_record</code>
     */
    public static final ProcessRecord PROCESS_RECORD = new ProcessRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessRecordRecord> getRecordType() {
        return ProcessRecordRecord.class;
    }

    /**
     * The column <code>SMETA_APP.process_record.id</code>. 主键
     */
    public final TableField<ProcessRecordRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.process_record.gmt_create</code>. 创建时间
     */
    public final TableField<ProcessRecordRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>SMETA_APP.process_record.gmt_modified</code>. 修改时间
     */
    public final TableField<ProcessRecordRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "修改时间");

    /**
     * The column <code>SMETA_APP.process_record.process_id</code>. 流程实例ID
     */
    public final TableField<ProcessRecordRecord, String> PROCESS_ID = createField("process_id", org.jooq.impl.SQLDataType.VARCHAR(256), this, "流程实例ID");

    /**
     * The column <code>SMETA_APP.process_record.key_code</code>. 业务编码
     */
    public final TableField<ProcessRecordRecord, String> KEY_CODE = createField("key_code", org.jooq.impl.SQLDataType.VARCHAR(256), this, "业务编码");

    /**
     * The column <code>SMETA_APP.process_record.process_type</code>. 流程分类
     */
    public final TableField<ProcessRecordRecord, String> PROCESS_TYPE = createField("process_type", org.jooq.impl.SQLDataType.VARCHAR(64), this, "流程分类");

    /**
     * The column <code>SMETA_APP.process_record.petitioner_id</code>. 申请人ID
     */
    public final TableField<ProcessRecordRecord, String> PETITIONER_ID = createField("petitioner_id", org.jooq.impl.SQLDataType.VARCHAR(64), this, "申请人ID");

    /**
     * The column <code>SMETA_APP.process_record.petitioner</code>. 申请人
     */
    public final TableField<ProcessRecordRecord, String> PETITIONER = createField("petitioner", org.jooq.impl.SQLDataType.VARCHAR(64), this, "申请人");

    /**
     * Create a <code>SMETA_APP.process_record</code> table reference
     */
    public ProcessRecord() {
        this(DSL.name("process_record"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.process_record</code> table reference
     */
    public ProcessRecord(String alias) {
        this(DSL.name(alias), PROCESS_RECORD);
    }

    /**
     * Create an aliased <code>SMETA_APP.process_record</code> table reference
     */
    public ProcessRecord(Name alias) {
        this(alias, PROCESS_RECORD);
    }

    private ProcessRecord(Name alias, Table<ProcessRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProcessRecord(Name alias, Table<ProcessRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "流程记录");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESS_RECORD_IDX_KEY_CODE_PROCESS_TYPE, Indexes.PROCESS_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProcessRecordRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PROCESS_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessRecordRecord> getPrimaryKey() {
        return Keys.KEY_PROCESS_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessRecordRecord>>asList(Keys.KEY_PROCESS_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessRecord as(String alias) {
        return new ProcessRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessRecord as(Name alias) {
        return new ProcessRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessRecord rename(String name) {
        return new ProcessRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessRecord rename(Name name) {
        return new ProcessRecord(name, null);
    }
}
