/*
 * This file is generated by jOOQ.
*/
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import test.generated.Indexes;
import test.generated.Keys;
import test.generated.SmetaApp;
import test.generated.tables.records.DictColumnClearFalseEventRecord;


/**
 * 数据字典可清除属性信息统计_未挂到事件
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictColumnClearFalseEvent extends TableImpl<DictColumnClearFalseEventRecord> {

    private static final long serialVersionUID = 1134026420;

    /**
     * The reference instance of <code>SMETA_APP.dict_column_clear_false_event</code>
     */
    public static final DictColumnClearFalseEvent DICT_COLUMN_CLEAR_FALSE_EVENT = new DictColumnClearFalseEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictColumnClearFalseEventRecord> getRecordType() {
        return DictColumnClearFalseEventRecord.class;
    }

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.id</code>. 主键
     */
    public final TableField<DictColumnClearFalseEventRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.gmt_create</code>. 创建时间
     */
    public final TableField<DictColumnClearFalseEventRecord, Timestamp> GMT_CREATE = createField("gmt_create", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.gmt_modified</code>. 修改时间
     */
    public final TableField<DictColumnClearFalseEventRecord, Timestamp> GMT_MODIFIED = createField("gmt_modified", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.dict_code</code>. 属性代码
     */
    public final TableField<DictColumnClearFalseEventRecord, String> DICT_CODE = createField("dict_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "属性代码");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.dict_name</code>. 属性名称
     */
    public final TableField<DictColumnClearFalseEventRecord, String> DICT_NAME = createField("dict_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "属性名称");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.dict_operator</code>. 操作人
     */
    public final TableField<DictColumnClearFalseEventRecord, String> DICT_OPERATOR = createField("dict_operator", org.jooq.impl.SQLDataType.VARCHAR(32), this, "操作人");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.dict_status</code>. 状态
     */
    public final TableField<DictColumnClearFalseEventRecord, String> DICT_STATUS = createField("dict_status", org.jooq.impl.SQLDataType.VARCHAR(32), this, "状态");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.tag_code</code>. 标志位代码:0-无任何下游；1-下游：有且只有事件；2-下游：有且只有指标；3-下游：有且只有规则；4-下游：有且只有脚本；5-下游：有且只有实体；6-下游：有且只有odps；
     */
    public final TableField<DictColumnClearFalseEventRecord, String> TAG_CODE = createField("tag_code", org.jooq.impl.SQLDataType.VARCHAR(32), this, "标志位代码:0-无任何下游；1-下游：有且只有事件；2-下游：有且只有指标；3-下游：有且只有规则；4-下游：有且只有脚本；5-下游：有且只有实体；6-下游：有且只有odps；");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.tag_name</code>. 标志位名称
     */
    public final TableField<DictColumnClearFalseEventRecord, String> TAG_NAME = createField("tag_name", org.jooq.impl.SQLDataType.VARCHAR(64), this, "标志位名称");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.blood_code</code>. 血缘代码
     */
    public final TableField<DictColumnClearFalseEventRecord, String> BLOOD_CODE = createField("blood_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "血缘代码");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.blood_name</code>. 血缘名称
     */
    public final TableField<DictColumnClearFalseEventRecord, String> BLOOD_NAME = createField("blood_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "血缘名称");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.blood_operator</code>. 下游操作人
     */
    public final TableField<DictColumnClearFalseEventRecord, String> BLOOD_OPERATOR = createField("blood_operator", org.jooq.impl.SQLDataType.VARCHAR(128), this, "下游操作人");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.event_code</code>. 事件编码
     */
    public final TableField<DictColumnClearFalseEventRecord, String> EVENT_CODE = createField("event_code", org.jooq.impl.SQLDataType.VARCHAR(128), this, "事件编码");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.event_name</code>. 事件名称
     */
    public final TableField<DictColumnClearFalseEventRecord, String> EVENT_NAME = createField("event_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "事件名称");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.dict_cost</code>. 属性加工成本
     */
    public final TableField<DictColumnClearFalseEventRecord, String> DICT_COST = createField("dict_cost", org.jooq.impl.SQLDataType.VARCHAR(128), this, "属性加工成本");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.reserve</code>. 备用字段
     */
    public final TableField<DictColumnClearFalseEventRecord, String> RESERVE = createField("reserve", org.jooq.impl.SQLDataType.VARCHAR(128), this, "备用字段");

    /**
     * The column <code>SMETA_APP.dict_column_clear_false_event.tenant_code</code>. 租户
     */
    public final TableField<DictColumnClearFalseEventRecord, String> TENANT_CODE = createField("tenant_code", org.jooq.impl.SQLDataType.VARCHAR(32), this, "租户");

    /**
     * Create a <code>SMETA_APP.dict_column_clear_false_event</code> table reference
     */
    public DictColumnClearFalseEvent() {
        this(DSL.name("dict_column_clear_false_event"), null);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_column_clear_false_event</code> table reference
     */
    public DictColumnClearFalseEvent(String alias) {
        this(DSL.name(alias), DICT_COLUMN_CLEAR_FALSE_EVENT);
    }

    /**
     * Create an aliased <code>SMETA_APP.dict_column_clear_false_event</code> table reference
     */
    public DictColumnClearFalseEvent(Name alias) {
        this(alias, DICT_COLUMN_CLEAR_FALSE_EVENT);
    }

    private DictColumnClearFalseEvent(Name alias, Table<DictColumnClearFalseEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictColumnClearFalseEvent(Name alias, Table<DictColumnClearFalseEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "数据字典可清除属性信息统计_未挂到事件");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SmetaApp.SMETA_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICT_COLUMN_CLEAR_FALSE_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DictColumnClearFalseEventRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DICT_COLUMN_CLEAR_FALSE_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictColumnClearFalseEventRecord> getPrimaryKey() {
        return Keys.KEY_DICT_COLUMN_CLEAR_FALSE_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictColumnClearFalseEventRecord>> getKeys() {
        return Arrays.<UniqueKey<DictColumnClearFalseEventRecord>>asList(Keys.KEY_DICT_COLUMN_CLEAR_FALSE_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictColumnClearFalseEvent as(String alias) {
        return new DictColumnClearFalseEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictColumnClearFalseEvent as(Name alias) {
        return new DictColumnClearFalseEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictColumnClearFalseEvent rename(String name) {
        return new DictColumnClearFalseEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictColumnClearFalseEvent rename(Name name) {
        return new DictColumnClearFalseEvent(name, null);
    }
}
